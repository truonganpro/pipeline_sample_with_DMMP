{"version":3,"file":"static/chunks/1357.24c3f7ab0108887b.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/instance/LastRunSummary.tsx","webpack://_N_E/../ui-core/src/instance/StepSummaryForRun.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/jobs/JobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/RunStatusPez.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx"],"sourcesContent":["import {Box, Popover, Tag} from '@dagster-io/ui-components';\nimport {memo, useMemo} from 'react';\n\nimport {StepSummaryForRun} from './StepSummaryForRun';\nimport {RunStatus} from '../graphql/types';\nimport {RunStatusIndicator} from '../runs/RunStatusDots';\nimport {RunStatusOverlay} from '../runs/RunStatusPez';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\nimport {RunStateSummary, RunTime} from '../runs/RunUtils';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {AnchorButton} from '../ui/AnchorButton';\n\ninterface Props {\n  name: string;\n  run: RunTimeFragment;\n  showHover?: boolean;\n  showButton?: boolean;\n  showSummary?: boolean;\n}\n\nexport const LastRunSummary = memo(\n  ({name, run, showHover = false, showButton = true, showSummary = true}: Props) => {\n    const {status} = run;\n\n    const intent = useMemo(() => {\n      switch (status) {\n        case RunStatus.SUCCESS:\n          return 'success';\n        case RunStatus.CANCELED:\n        case RunStatus.CANCELING:\n        case RunStatus.FAILURE:\n          return 'danger';\n        default:\n          return 'none';\n      }\n    }, [status]);\n\n    const tag = () => {\n      const tagElement = (\n        <Tag intent={intent}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n            <RunStatusIndicator status={run.status} size={10} />\n            <RunTime run={run} />\n          </Box>\n        </Tag>\n      );\n\n      if (!showHover) {\n        return tagElement;\n      }\n\n      return (\n        <Popover\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={name} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          {tagElement}\n        </Popover>\n      );\n    };\n\n    return (\n      <Box\n        flex={{\n          direction: 'row',\n          justifyContent: 'space-between',\n          alignItems: 'flex-start',\n          gap: 16,\n        }}\n      >\n        <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 4}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            {tag()}\n            {showSummary ? <RunStateSummary run={run} /> : null}\n          </Box>\n          {showSummary && (failedStatuses.has(run.status) || inProgressStatuses.has(run.status)) ? (\n            <StepSummaryForRun runId={run.id} />\n          ) : undefined}\n        </Box>\n        {showButton ? <AnchorButton to={`/runs/${run.id}`}>View run</AnchorButton> : null}\n      </Box>\n    );\n  },\n);\n","import {Caption, Colors} from '@dagster-io/ui-components';\nimport qs from 'qs';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {\n  StepSummaryForRunQuery,\n  StepSummaryForRunQueryVariables,\n} from './types/StepSummaryForRun.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {StepEventStatus} from '../graphql/types';\nimport {failedStatuses, inProgressStatuses} from '../runs/RunStatuses';\n\ninterface Props {\n  runId: string;\n}\n\nexport const StepSummaryForRun = (props: Props) => {\n  const {runId} = props;\n  const queryResult = useQuery<StepSummaryForRunQuery, StepSummaryForRunQueryVariables>(\n    STEP_SUMMARY_FOR_RUN_QUERY,\n    {\n      variables: {runId},\n    },\n  );\n  const {data} = queryResult;\n\n  const run = data?.pipelineRunOrError;\n  const status = run?.__typename === 'Run' ? run.status : null;\n\n  const relevantSteps = useMemo(() => {\n    if (run?.__typename !== 'Run') {\n      return [];\n    }\n\n    const {status} = run;\n    if (failedStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.FAILURE);\n    }\n\n    if (inProgressStatuses.has(status)) {\n      return run.stepStats.filter((step) => step.status === StepEventStatus.IN_PROGRESS);\n    }\n\n    return [];\n  }, [run]);\n\n  const stepCount = relevantSteps.length;\n\n  if (!stepCount || !status) {\n    return null;\n  }\n\n  if (failedStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          Failed at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        Failed at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  if (inProgressStatuses.has(status)) {\n    if (stepCount === 1) {\n      const step = relevantSteps[0]!;\n      const query = step.endTime\n        ? qs.stringify({focusedTime: Math.floor(step.endTime * 1000)}, {addQueryPrefix: true})\n        : '';\n      return (\n        <Caption color={Colors.textLight()}>\n          In progress at <Link to={`/runs/${runId}${query}`}>{step.stepKey}</Link>\n        </Caption>\n      );\n    }\n    return (\n      <Caption color={Colors.textLight()}>\n        In progress at <Link to={`/runs/${runId}`}>{stepCount} steps</Link>\n      </Caption>\n    );\n  }\n\n  return null;\n};\n\nconst STEP_SUMMARY_FOR_RUN_QUERY = gql`\n  query StepSummaryForRunQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        stepStats {\n          endTime\n          stepKey\n          status\n        }\n      }\n    }\n  }\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && workspaceLoading;\n\n  useBlockTraceUntilTrue('OverviewJobs', !loading);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<OverviewJobsQuery['workspaceOrError'], {__typename: 'Workspace'}>['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {JobsPageContent} from './JobsPageContent';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const JobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Jobs</Heading>} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default JobsRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Box, CaptionMono, Colors, FontFamily, Popover} from '@dagster-io/ui-components';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {RunStatusIndicator} from './RunStatusDots';\nimport {RUN_STATUS_COLORS} from './RunStatusTag';\nimport {failedStatuses, inProgressStatuses} from './RunStatuses';\nimport {RunStateSummary, RunTime, titleForRun} from './RunUtils';\nimport {RunTimeFragment} from './types/RunUtils.types';\nimport {RunStatus} from '../graphql/types';\nimport {StepSummaryForRun} from '../instance/StepSummaryForRun';\n\nconst MIN_OPACITY = 0.2;\nconst MAX_OPACITY = 1.0;\nconst MIN_OPACITY_STEPS = 3;\n\ninterface Props {\n  opacity?: number;\n  runId: string;\n  status: RunStatus;\n}\n\nexport const RunStatusPez = (props: Props) => {\n  const {status, opacity = MAX_OPACITY} = props;\n  const color = RUN_STATUS_COLORS[status];\n\n  return <Pez $color={color} $opacity={opacity} />;\n};\n\ninterface ListProps {\n  fade: boolean;\n  jobName: string;\n  runs: RunTimeFragment[];\n}\n\nexport const RunStatusPezList = (props: ListProps) => {\n  const {fade, jobName, runs} = props;\n  const count = runs.length;\n  const countForStep = Math.max(MIN_OPACITY_STEPS, count);\n  const step = (MAX_OPACITY - MIN_OPACITY) / countForStep;\n  return (\n    <Box flex={{direction: 'row', alignItems: 'center', gap: 2}}>\n      {runs.map((run, ii) => (\n        <Popover\n          key={run.id}\n          position=\"top\"\n          interactionKind=\"hover\"\n          content={\n            <div>\n              <RunStatusOverlay run={run} name={jobName} />\n            </div>\n          }\n          hoverOpenDelay={100}\n        >\n          <RunStatusPez\n            key={run.id}\n            runId={run.id}\n            status={run.status}\n            opacity={fade ? MAX_OPACITY - (count - ii - 1) * step : 1.0}\n          />\n        </Popover>\n      ))}\n    </Box>\n  );\n};\n\ninterface OverlayProps {\n  run: RunTimeFragment;\n  name: string;\n}\n\nexport const RunStatusOverlay = ({name, run}: OverlayProps) => {\n  return (\n    <OverlayContainer>\n      <OverlayTitle>{name}</OverlayTitle>\n      <RunRow>\n        <Box flex={{alignItems: 'center', direction: 'row', gap: 8}}>\n          <RunStatusIndicator status={run.status} />\n          <Link to={`/runs/${run.id}`}>\n            <CaptionMono>{titleForRun(run)}</CaptionMono>\n          </Link>\n        </Box>\n        <Box flex={{direction: 'column', gap: 4}}>\n          <RunTime run={run} />\n          <RunStateSummary run={run} />\n        </Box>\n      </RunRow>\n      {failedStatuses.has(run.status) || inProgressStatuses.has(run.status) ? (\n        <SummaryContainer>\n          <StepSummaryForRun runId={run.id} />\n        </SummaryContainer>\n      ) : null}\n    </OverlayContainer>\n  );\n};\n\nconst OverlayContainer = styled.div`\n  padding: 4px;\n  font-size: 12px;\n  width: 220px;\n`;\n\nconst OverlayTitle = styled.div`\n  padding: 8px;\n  box-shadow: inset 0 -1px ${Colors.keylineDefault()};\n  font-family: ${FontFamily.default};\n  font-size: 14px;\n  font-weight: 500;\n  color: ${Colors.textDefault()};\n  max-width: 100%;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  min-width: 0px;\n`;\n\nconst RunRow = styled.div`\n  padding: 8px;\n  display: flex;\n  align-items: flex-start;\n  justify-content: space-between;\n`;\n\nconst SummaryContainer = styled.div`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  padding: 4px 8px 8px;\n\n  :empty {\n    display: none;\n  }\n`;\n\nconst Pez = styled.div<{$color: string; $opacity: number}>`\n  background-color: ${({$color}) => $color};\n  border-radius: 2px;\n  height: 16px;\n  opacity: ${({$opacity}) => $opacity};\n  width: 8px;\n`;\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["LastRunSummary","memo","name","run","showHover","showButton","showSummary","param","status","intent","useMemo","RunStatus","SUCCESS","CANCELED","CANCELING","FAILURE","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","Box","flex","direction","justifyContent","alignItems","gap","tag","tagElement","jsx","Tag","RunStatusIndicator","size","RunTime","Popover","position","interactionKind","content","div","RunStatusOverlay","hoverOpenDelay","RunStateSummary","failedStatuses","has","inProgressStatuses","StepSummaryForRun","runId","id","undefined","AnchorButton","to","concat","props","data","useQuery","STEP_SUMMARY_FOR_RUN_QUERY","variables","pipelineRunOrError","__typename","relevantSteps","stepStats","filter","step","StepEventStatus","IN_PROGRESS","stepCount","length","query","endTime","qs","focusedTime","Math","floor","addQueryPrefix","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","Caption","color","Colors","Link","stepKey","gql","OverviewJobsTable","repos","parentRef","useRef","allKeys","map","repoAddress","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","jobs","push","type","jobCount","repoKey","includes","isJob","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","row","ii","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","style","overflow","Container","ref","VirtualizedJobHeader","Inner","$totalHeight","index","key","start","RepoRow","height","expanded","showLocation","rightElement","Tooltip","placement","VirtualizedJobRow","JobsPageContent","allRepos","visibleRepos","loading","workspaceLoading","cachedData","useContext","WorkspaceContext","searchValue","setSearchValue","useQueryPersistedState","queryKey","defaults","search","repoCount","queryResultOverview","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","cachedEntries","Object","values","location","workspaceOrError","entries","locationEntries","visibleKeys","visibleRepoKeys","buildBuckets","useBlockTraceUntilTrue","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","Fragment","padding","horizontal","vertical","grow","RepoFilterButton","TextInput","icon","value","SearchInputSpinner","tooltipContent","onChange","e","target","placeholder","width","QueryRefreshCountdown","SpinnerWithText","label","paddingTop","Spinner","purpose","anyReposHidden","top","NonIdealState","title","description","strong","entry","locationOrLoadError","buckets","repo","repositories","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","sortRepoBuckets","PYTHON_ERROR_FRAGMENT","JobsRoot","useTrackPageView","useDocumentTitle","PageHeader","Heading","__webpack_exports__","sort","a","b","aString","bString","localeCompare","Set","option","repository","repositoryLocation","RunStatusPez","opacity","RUN_STATUS_COLORS","Pez","$color","$opacity","RunStatusPezList","fade","jobName","runs","max","MAX_OPACITY","OverlayContainer","OverlayTitle","RunRow","CaptionMono","titleForRun","SummaryContainer","styled","withConfig","FontFamily","default","useDelayedState","ready","setReady","useState","useEffect","timer","setTimeout","delayMsec","clearTimeout","margin","canShow","JobMenu","job","isAssetJob","lastRun","pipelineSelector","pipelineName","repositoryName","repositoryLocationName","materialize","useMaterializationAction","onReexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","useCallback","executeItem","MenuItem","text","disabled","onClick","MenuLink","workspacePipelinePath","repoName","repoLocation","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","onOpened","Menu","display","Button","Icon","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","queryJob","SINGLE_JOB_QUERY","selector","buildPipelineSelector","useDelayedRowQuery","pipelineOrError","schedules","sensors","latestRuns","Row","$height","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","workspacePathFromAddress","MiddleTruncate","CaptionText","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","reverse","marginTop","HeaderRow","templateColumns","sticky","HeaderCell","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}