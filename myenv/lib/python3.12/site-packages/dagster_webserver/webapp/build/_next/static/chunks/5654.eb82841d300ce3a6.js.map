{"version":3,"file":"static/chunks/5654.eb82841d300ce3a6.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/overview/OverviewJobsTable.tsx","webpack://_N_E/../ui-core/src/jobs/JobsPageContent.tsx","webpack://_N_E/../ui-core/src/overview/OverviewAssetsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageAlerts.oss.tsx","webpack://_N_E/../ui-core/src/overview/OverviewTabs.tsx","webpack://_N_E/../ui-core/src/overview/OverviewPageHeader.tsx","webpack://_N_E/../ui-core/src/overview/OverviewActivityRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewJobsRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewResourcesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedules.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSchedulesRoot.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsTable.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensors.tsx","webpack://_N_E/../ui-core/src/overview/OverviewSensorsRoot.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/InstanceAutomaterializationEvaluationHistoryTable.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/GlobalAutomaterializationContent.tsx","webpack://_N_E/../ui-core/src/assets/auto-materialization/AutomaterializationRoot.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfills.tsx","webpack://_N_E/../ui-core/src/instance/InstanceBackfillsRoot.tsx","webpack://_N_E/../ui-core/src/instance/backfill/BackfillPage.tsx","webpack://_N_E/../ui-core/src/overview/OverviewRoot.tsx","webpack://_N_E/../ui-core/src/overview/sortRepoBuckets.tsx","webpack://_N_E/../ui-core/src/overview/visibleRepoKeys.tsx","webpack://_N_E/../ui-core/src/runs/RunListTabs.tsx"],"sourcesContent":["import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {Container, Inner, TABLE_HEADER_HEIGHT} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedJobHeader, VirtualizedJobRow} from '../workspace/VirtualizedJobRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; jobCount: number}\n  | {type: 'job'; repoAddress: RepoAddress; isJob: boolean; name: string};\n\nexport const OverviewJobsTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, jobs}) => {\n      flat.push({type: 'header', repoAddress, jobCount: jobs.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        jobs.forEach(({isJob, name}) => {\n          flat.push({type: 'job', repoAddress, isJob, name});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? TABLE_HEADER_HEIGHT : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedJobHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={row.jobCount === 1 ? '1 job' : `${row.jobCount} jobs`}\n                    placement=\"top\"\n                  >\n                    <Tag>{row.jobCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedJobRow\n                key={key}\n                name={row.name}\n                isJob={row.isJob}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {\n  Box,\n  Colors,\n  NonIdealState,\n  Spinner,\n  SpinnerWithText,\n  TextInput,\n} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewJobsQuery, OverviewJobsQueryVariables} from './types/JobsPageContent.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {isHiddenAssetGroupJob} from '../asset-graph/Utils';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {OverviewJobsTable} from '../overview/OverviewJobsTable';\nimport {sortRepoBuckets} from '../overview/sortRepoBuckets';\nimport {visibleRepoKeys} from '../overview/visibleRepoKeys';\nimport {useBlockTraceUntilTrue} from '../performance/TraceContext';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const JobsPageContent = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewJobsQuery, OverviewJobsQueryVariables>(\n    OVERVIEW_JOBS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && workspaceLoading;\n\n  useBlockTraceUntilTrue('OverviewJobs', !loading);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, jobs}) => ({\n        repoAddress,\n        jobs: jobs.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({jobs}) => jobs.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading jobs…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching jobs\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in the selected code\n                    locations\n                  </div>\n                ) : (\n                  <div>\n                    No jobs matching <strong>{searchValue}</strong> were found in your definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No jobs\"\n            description={\n              anyReposHidden\n                ? 'No jobs were found in the selected code locations'\n                : 'No jobs were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewJobsTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 12}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between', grow: 0}}\n      >\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          {repoCount > 1 ? <RepoFilterButton /> : null}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? <SearchInputSpinner tooltipContent=\"Loading jobs…\" /> : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by job name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <SpinnerWithText label=\"Loading jobs…\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  jobs: {\n    isJob: boolean;\n    name: string;\n  }[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<OverviewJobsQuery['workspaceOrError'], {__typename: 'Workspace'}>['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, pipelines} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const jobs = pipelines\n        .filter(({name}) => !isHiddenAssetGroupJob(name))\n        .map((pipeline) => {\n          return {\n            isJob: pipeline.isJob,\n            name: pipeline.name,\n          };\n        });\n\n      if (jobs.length > 0) {\n        buckets.push({\n          repoAddress,\n          jobs,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_JOBS_QUERY = gql`\n  query OverviewJobsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                pipelines {\n                  id\n                  name\n                  isJob\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n`;\n","import {\n  Alert,\n  Box,\n  Caption,\n  Colors,\n  Icon,\n  MenuItem,\n  Select,\n  Spinner,\n  Tag,\n  TextInput,\n  useViewport,\n} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {FIFTEEN_SECONDS, RefreshState, useRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useAssetsBaseData} from '../asset-data/AssetBaseDataProvider';\nimport {StatusCase, buildAssetNodeStatusContent} from '../asset-graph/AssetNodeStatusContent';\nimport {displayNameForAssetKey} from '../asset-graph/Utils';\nimport {groupAssetsByStatus} from '../asset-graph/util';\nimport {partitionCountString} from '../assets/AssetNodePartitionCounts';\nimport {useAllAssets} from '../assets/AssetsCatalogTable';\nimport {assetDetailsPathForKey} from '../assets/assetDetailsPathForKey';\nimport {AssetCatalogTableQuery} from '../assets/types/AssetsCatalogTable.types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepositoryLink} from '../nav/RepositoryLink';\nimport {Container, HeaderCell, HeaderRow, Inner, Row, RowCell} from '../ui/VirtualizedTable';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {workspacePathFromAddress} from '../workspace/workspacePath';\n\ntype Props = {\n  Header: React.ComponentType<{refreshState: RefreshState}>;\n  TabButton: React.ComponentType<{selected: 'timeline' | 'assets'}>;\n};\nexport const OverviewAssetsRoot = ({Header, TabButton}: Props) => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Assets');\n\n  const {assets, query, error, loading} = useAllAssets();\n  const refreshState = useRefreshAtInterval<any>({\n    refresh: query,\n    intervalMs: FIFTEEN_SECONDS,\n    leading: true,\n  });\n\n  const groupedAssetsUnfiltered = React.useMemo(() => {\n    if (assets) {\n      return groupAssets(assets);\n    }\n    return [];\n  }, [assets]);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'q',\n    decode: (qs) => (qs.searchQuery ? JSON.parse(qs.searchQuery) : ''),\n    encode: (searchQuery) => ({searchQuery: searchQuery ? JSON.stringify(searchQuery) : undefined}),\n  });\n\n  const groupedAssets = React.useMemo(() => {\n    if (searchValue === '') {\n      return groupedAssetsUnfiltered;\n    }\n    return groupedAssetsUnfiltered.filter((group) => {\n      return (\n        (group.groupName || UNGROUPED_ASSETS).toLowerCase().includes(searchValue.toLowerCase()) ||\n        group.repositoryName.toLowerCase().includes(searchValue.toLowerCase())\n      );\n    });\n  }, [groupedAssetsUnfiltered, searchValue]);\n\n  const orderedAssets = React.useMemo(\n    () => groupedAssets.flatMap((group) => group.assets.map((asset) => asset.key)) ?? [],\n    [groupedAssets],\n  );\n  useAssetsBaseData(orderedAssets, 'OverviewAssetsRoot');\n\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n\n  const rowVirtualizer = useVirtualizer({\n    count: groupedAssets.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: () => 82,\n    overscan: 5,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  function content() {\n    if (loading) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (error) {\n      return (\n        <Box\n          flex={{alignItems: 'center', justifyContent: 'center', direction: 'column', grow: 1}}\n          style={{width: '100%'}}\n        >\n          <PythonErrorInfo error={error} />\n        </Box>\n      );\n    }\n\n    return (\n      <Box flex={{direction: 'column'}} style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualHeaderRow />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const group = groupedAssets[index]!;\n              return <VirtualRow key={key} start={start} height={size} group={group} />;\n            })}\n          </Inner>\n        </Container>\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <div style={{position: 'sticky', top: 0, zIndex: 1}}>\n        <Header refreshState={refreshState} />\n        <Box\n          padding={{horizontal: 24, vertical: 16}}\n          flex={{alignItems: 'center', gap: 12, grow: 0}}\n        >\n          <TabButton selected=\"assets\" />\n          <TextInput\n            value={searchValue}\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n            }}\n            placeholder=\"Filter asset groups…\"\n          />\n        </Box>\n        <Box padding={{horizontal: 24, vertical: 16}} border=\"top\">\n          <Alert\n            intent=\"info\"\n            title=\"This Assets tab will be removed in an upcoming release.\"\n            description={\n              <>\n                Use the <Link to=\"/asset-groups\">global asset lineage page</Link> to view grouped\n                asset status details.\n              </>\n            }\n          />\n        </Box>\n      </div>\n      {content()}\n    </>\n  );\n};\n\ntype Assets = Extract<\n  AssetCatalogTableQuery['assetsOrError'],\n  {__typename: 'AssetConnection'}\n>['nodes'];\n\nfunction groupAssets(assets: Assets) {\n  const groups: Record<\n    string,\n    {\n      groupName: string | null;\n      repositoryName: string;\n      assets: Assets;\n    }\n  > = {};\n\n  assets.forEach((asset) => {\n    if (!asset.definition) {\n      return;\n    }\n    const groupName = asset.definition.groupName;\n    const repositoryName = asset.definition.repository.name;\n    const key = `${groupName}||${repositoryName}`;\n    const target = groups[key] || {\n      groupName,\n      repositoryName,\n      assets: [] as Assets,\n    };\n    target.assets.push(asset);\n    groups[key] = target;\n  });\n  return Object.values(groups);\n}\n\nconst TEMPLATE_COLUMNS = '5fr 1fr 1fr 1fr 1fr';\n\nconst VirtualHeaderRow = () => (\n  <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n    <HeaderCell>Group name</HeaderCell>\n    <HeaderCell>Missing</HeaderCell>\n    <HeaderCell>Failed/Overdue</HeaderCell>\n    <HeaderCell>In progress</HeaderCell>\n    <HeaderCell>Materialized</HeaderCell>\n  </HeaderRow>\n);\n\nconst UNGROUPED_ASSETS = 'Ungrouped Assets';\ntype RowProps = {\n  height: number;\n  start: number;\n  group: ReturnType<typeof groupAssets>[0];\n};\nfunction VirtualRow({height, start, group}: RowProps) {\n  const assetKeys = React.useMemo(\n    () => group.assets.map((asset) => ({path: asset.key.path})),\n    [group.assets],\n  );\n\n  const {liveDataByNode} = useAssetsBaseData(assetKeys);\n\n  const statuses = React.useMemo(() => {\n    return groupAssetsByStatus(group.assets, liveDataByNode);\n  }, [liveDataByNode, group.assets]);\n\n  const repo = group.assets.find((asset) => asset.definition?.repository)?.definition?.repository;\n  const repoAddress = buildRepoAddress(repo?.name || '', repo?.location.name || '');\n\n  const {containerProps, viewport} = useViewport();\n\n  const isBatchStillLoading = assetKeys.length !== Object.keys(liveDataByNode).length;\n  const zeroOrBlank = isBatchStillLoading ? '' : '0';\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <Cell>\n          <Box flex={{direction: 'row', justifyContent: 'space-between', grow: 1}}>\n            <Box flex={{direction: 'column', gap: 2, grow: 1}}>\n              <Box flex={{direction: 'row', gap: 8}}>\n                <Icon name=\"asset_group\" />\n                {group.groupName ? (\n                  <Link\n                    style={{fontWeight: 700}}\n                    to={workspacePathFromAddress(repoAddress, `/asset-groups/${group.groupName}`)}\n                  >\n                    {group.groupName}\n                  </Link>\n                ) : (\n                  UNGROUPED_ASSETS\n                )}\n              </Box>\n              <div {...containerProps}>\n                <RepositoryLinkWrapper maxWidth={viewport.width}>\n                  <RepositoryLink repoAddress={repoAddress} showRefresh={false} />\n                </RepositoryLinkWrapper>\n              </div>\n            </Box>\n            <Box flex={{direction: 'column', justifyContent: 'center'}}>\n              {isBatchStillLoading ? <Spinner purpose=\"body-text\" /> : null}\n            </Box>\n          </Box>\n        </Cell>\n        <Cell>\n          {statuses.missing.length ? (\n            <SelectOnHover\n              assets={statuses.missing}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MISSING) {\n                  return status.numMissing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"missing\"\n            >\n              <Tag intent=\"none\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: '12px',\n                      height: '12px',\n                      border: `2px solid ${Colors.borderDefault()}`,\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.missing.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.failed.length ? (\n            <SelectOnHover\n              assets={statuses.failed}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_FAILED) {\n                  return status.numFailed || 0;\n                }\n                return 0;\n              }}\n              adjective=\"failed\"\n            >\n              <Tag intent=\"danger\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      width: 0,\n                      height: 0,\n                      borderLeft: '6px solid transparent',\n                      borderRight: '6px solid transparent',\n                      borderBottom: '10px solid red',\n                      display: 'inline-block',\n                    }}\n                  />\n                  {statuses.failed.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.inprogress.length ? (\n            <SelectOnHover\n              assets={statuses.inprogress}\n              getCount={({status}) => {\n                if (status.case === StatusCase.MATERIALIZING) {\n                  return status.numMaterializing || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materializing\"\n            >\n              <Tag intent=\"primary\" icon=\"spinner\">\n                {statuses.inprogress.length}\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n        <Cell>\n          {statuses.successful.length ? (\n            <SelectOnHover\n              assets={statuses.successful}\n              getCount={({status}) => {\n                if (status.case === StatusCase.PARTITIONS_MATERIALIZED) {\n                  return status.numMaterialized || 0;\n                }\n                return 0;\n              }}\n              adjective=\"materialized\"\n            >\n              <Tag intent=\"success\">\n                <Box flex={{direction: 'row', alignItems: 'center', gap: 6}}>\n                  <div\n                    style={{\n                      backgroundColor: Colors.accentGreen(),\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                    }}\n                  />\n                  {statuses.successful.length}\n                </Box>\n              </Tag>\n            </SelectOnHover>\n          ) : (\n            zeroOrBlank\n          )}\n        </Cell>\n      </RowGrid>\n    </Row>\n  );\n}\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n  > * {\n    vertical-align: middle;\n  }\n`;\n\nconst Cell = ({children}: {children: React.ReactNode}) => {\n  return (\n    <RowCell style={{color: Colors.textDefault()}}>\n      <Box flex={{direction: 'row', alignItems: 'center', grow: 1}}>{children}</Box>\n    </RowCell>\n  );\n};\n\nconst RepositoryLinkWrapper = styled.div<{maxWidth?: number}>`\n  font-size: 12px;\n  pointer-events: none;\n  a {\n    color: ${Colors.textLight()};\n    pointer-events: none;\n    max-width: ${({maxWidth}) => (maxWidth ? 'unset' : `${maxWidth}px`)};\n  }\n`;\n\ntype AssetWithStatusType = {\n  asset: Assets[0];\n  status: ReturnType<typeof buildAssetNodeStatusContent>;\n};\nfunction SelectOnHover({\n  assets,\n  children,\n  getCount,\n  adjective,\n}: {\n  assets: AssetWithStatusType[];\n  children: React.ReactNode;\n  getCount: (asset: AssetWithStatusType) => number;\n  adjective: string;\n}) {\n  return (\n    <SelectWrapper>\n      <Select\n        items={assets}\n        itemPredicate={(query, item) =>\n          displayNameForAssetKey(item.asset.key)\n            .toLocaleLowerCase()\n            .includes(query.toLocaleLowerCase())\n        }\n        itemRenderer={(item) => {\n          const count = getCount(item);\n          return (\n            <LinkWithNoUnderline to={assetDetailsPathForKey(item.asset.key)} target=\"_blank\">\n              <MenuItem\n                key={displayNameForAssetKey(item.asset.key)}\n                text={\n                  <Box flex={{direction: 'row', alignItems: 'center', gap: 4}}>\n                    <div style={{paddingLeft: '4px'}}>\n                      <Icon name=\"asset\" />\n                    </div>\n                    <div\n                      style={{overflow: 'hidden', whiteSpace: 'nowrap', textOverflow: 'ellipsis'}}\n                    >\n                      {displayNameForAssetKey(item.asset.key)}\n                    </div>\n                    {count && count > 0 ? (\n                      <Caption style={{color: Colors.textLight()}}>\n                        {partitionCountString(count)} {adjective}\n                      </Caption>\n                    ) : null}\n                  </Box>\n                }\n              />\n            </LinkWithNoUnderline>\n          );\n        }}\n        onItemSelect={() => {}}\n      >\n        {children}\n      </Select>\n    </SelectWrapper>\n  );\n}\n\nconst SelectWrapper = styled.div`\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n`;\n\nconst LinkWithNoUnderline = styled(Link)`\n  &:hover {\n    text-decoration: none;\n  }\n`;\n","export const OverviewPageAlerts = () => null;\n","import {Box, Colors, Spinner, Tabs} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\n\nimport {QueryResult} from '../apollo-client';\nimport {useFeatureFlags} from '../app/Flags';\nimport {QueryRefreshCountdown, RefreshState} from '../app/QueryRefresh';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {useAutomaterializeDaemonStatus} from '../assets/useAutomaterializeDaemonStatus';\nimport {TabLink} from '../ui/TabLink';\n\ninterface Props<TData> {\n  refreshState?: RefreshState;\n  queryData?: QueryResult<TData, any>;\n  tab: string;\n}\n\nexport const OverviewTabs = <TData extends Record<string, any>>(props: Props<TData>) => {\n  const {refreshState, tab} = props;\n\n  const {flagSettingsPage} = useFeatureFlags();\n\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {enableAssetHealthOverviewPreview} = useContext(AssetFeatureContext);\n\n  return (\n    <Box flex={{direction: 'row', justifyContent: 'space-between', alignItems: 'flex-end'}}>\n      <Tabs selectedTabId={tab}>\n        <TabLink id=\"activity\" title=\"Timeline\" to=\"/overview/activity\" />\n        {enableAssetHealthOverviewPreview && (\n          <TabLink id=\"asset-health\" title=\"Asset health\" to=\"/overview/asset-health\" />\n        )}\n        {/* These are flagged individually because the links must be children of `Tabs`: */}\n        {flagSettingsPage ? null : <TabLink id=\"jobs\" title=\"Jobs\" to=\"/overview/jobs\" />}\n        {flagSettingsPage ? null : (\n          <TabLink id=\"schedules\" title=\"Schedules\" to=\"/overview/schedules\" />\n        )}\n        {flagSettingsPage ? null : <TabLink id=\"sensors\" title=\"Sensors\" to=\"/overview/sensors\" />}\n        {automaterializeSensorsFlagState === 'has-global-amp' ? (\n          <TabLink\n            id=\"amp\"\n            title={\n              <Box flex={{direction: 'row', gap: 8, alignItems: 'center'}}>\n                <div>Auto-materialize</div>\n                {automaterialize.loading ? (\n                  <Spinner purpose=\"body-text\" />\n                ) : (\n                  <div\n                    style={{\n                      width: '10px',\n                      height: '10px',\n                      borderRadius: '50%',\n                      backgroundColor:\n                        automaterialize.paused === false\n                          ? Colors.accentBlue()\n                          : Colors.accentGray(),\n                    }}\n                  />\n                )}\n              </Box>\n            }\n            to=\"/overview/automation\"\n          />\n        ) : null}\n        <TabLink id=\"resources\" title=\"Resources\" to=\"/overview/resources\" />\n        <TabLink id=\"backfills\" title=\"Backfills\" to=\"/overview/backfills\" />\n      </Tabs>\n      {refreshState ? (\n        <Box style={{alignSelf: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n        </Box>\n      ) : null}\n    </Box>\n  );\n};\n","import {Box, PageHeader} from '@dagster-io/ui-components';\nimport React from 'react';\nimport {OverviewPageAlerts} from 'shared/overview/OverviewPageAlerts.oss';\n\nimport {OverviewTabs} from './OverviewTabs';\n\nexport const OverviewPageHeader = ({\n  tab,\n  queryData,\n  refreshState,\n  ...rest\n}: React.ComponentProps<typeof OverviewTabs> &\n  Omit<React.ComponentProps<typeof PageHeader>, 'title'>) => {\n  return (\n    <PageHeader\n      tabs={\n        <Box flex={{direction: 'column', gap: 8}}>\n          <OverviewTabs tab={tab} queryData={queryData} refreshState={refreshState} />\n          <OverviewPageAlerts />\n        </Box>\n      }\n      {...rest}\n    />\n  );\n};\n","import {Box, JoinedButtons} from '@dagster-io/ui-components';\nimport * as React from 'react';\nimport {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewAssetsRoot} from './OverviewAssetsRoot';\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewTabs} from './OverviewTabs';\nimport {OverviewTimelineRoot} from './OverviewTimelineRoot';\nimport {Route} from '../app/Route';\nimport {AssetFeatureContext} from '../assets/AssetFeatureContext';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useStateWithStorage} from '../hooks/useStateWithStorage';\nimport {ActivatableButton} from '../runs/RunListTabs';\n\nexport const OverviewActivityRoot = () => {\n  useDocumentTitle('Overview | Activity');\n\n  const header = React.useCallback(\n    ({refreshState}: {refreshState: React.ComponentProps<typeof OverviewTabs>['refreshState']}) => (\n      <OverviewPageHeader tab=\"activity\" refreshState={refreshState} />\n    ),\n    [],\n  );\n\n  const [_defaultTab, setDefaultTab] = useStateWithStorage<'timeline' | 'assets'>(\n    'overview-activity-tab',\n    (json) => (['timeline', 'assets'].includes(json) ? json : 'timeline'),\n  );\n\n  const {enableAssetHealthOverviewPreview} = React.useContext(AssetFeatureContext);\n  const defaultTab = enableAssetHealthOverviewPreview ? 'timeline' : _defaultTab;\n\n  const tabButton = React.useCallback(\n    ({selected}: {selected: 'timeline' | 'assets'}) => {\n      if (enableAssetHealthOverviewPreview) {\n        return null;\n      }\n      if (defaultTab !== selected) {\n        setDefaultTab(selected);\n      }\n      return (\n        <JoinedButtons>\n          <ActivatableButton $active={selected === 'timeline'} to=\"/overview/activity/timeline\">\n            Timeline\n          </ActivatableButton>\n          <ActivatableButton $active={selected === 'assets'} to=\"/overview/activity/assets\">\n            Assets\n          </ActivatableButton>\n        </JoinedButtons>\n      );\n    },\n    [defaultTab, setDefaultTab, enableAssetHealthOverviewPreview],\n  );\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <Switch>\n        {!enableAssetHealthOverviewPreview && (\n          <Route path=\"/overview/activity/assets\">\n            <OverviewAssetsRoot Header={header} TabButton={tabButton} />\n          </Route>\n        )}\n        <Route path=\"/overview/activity/timeline\">\n          <OverviewTimelineRoot Header={header} TabButton={tabButton} />\n        </Route>\n        <Route\n          path=\"*\"\n          isNestingRoute\n          render={React.useCallback(\n            () =>\n              defaultTab === 'timeline' ? (\n                <Redirect to=\"/overview/activity/timeline\" />\n              ) : (\n                <Redirect to=\"/overview/activity/assets\" />\n              ),\n            [defaultTab],\n          )}\n        />\n      </Switch>\n    </Box>\n  );\n};\n","import {Box, Heading, PageHeader} from '@dagster-io/ui-components';\n\nimport {OverviewTabs} from './OverviewTabs';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {JobsPageContent} from '../jobs/JobsPageContent';\n\nexport const OverviewJobsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Jobs');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader title={<Heading>Overview</Heading>} tabs={<OverviewTabs tab=\"jobs\" />} />\n      <JobsPageContent />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport {useMemo, useRef} from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {\n  VirtualizedResourceHeader,\n  VirtualizedResourceRow,\n} from '../resources/VirtualizedResourceRow';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\ninterface Props {\n  repos: Repository[];\n}\n\ninterface Resource extends ResourceEntryFragment {\n  type: 'resource';\n  repoAddress: RepoAddress;\n}\n\ntype RowType = {type: 'header'; repoAddress: RepoAddress; resourceCount: number} | Resource;\n\nexport const OverviewResourcesTable = ({repos}: Props) => {\n  const parentRef = useRef<HTMLDivElement | null>(null);\n  const allKeys = useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, resources}) => {\n      flat.push({type: 'header', repoAddress, resourceCount: resources.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        resources.forEach((resource) => {\n          flat.push({type: 'resource', repoAddress, ...resource});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedResourceHeader />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            return type === 'header' ? (\n              <RepoRow\n                repoAddress={row.repoAddress}\n                key={key}\n                height={size}\n                start={start}\n                onToggle={onToggle}\n                onToggleAll={onToggleAll}\n                expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                rightElement={\n                  <Tooltip\n                    content={\n                      row.resourceCount === 1 ? '1 resource' : `${row.resourceCount} resources`\n                    }\n                    placement=\"top\"\n                  >\n                    <Tag>{row.resourceCount}</Tag>\n                  </Tooltip>\n                }\n              />\n            ) : (\n              <VirtualizedResourceRow key={key} height={size} start={start} {...row} />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewResourcesTable} from './OverviewResourcesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {\n  OverviewResourcesQuery,\n  OverviewResourcesQueryVariables,\n} from './types/OverviewResourcesRoot.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {RepoFilterButton} from '../instance/RepoFilterButton';\nimport {RESOURCE_ENTRY_FRAGMENT} from '../resources/WorkspaceResourcesRoot';\nimport {ResourceEntryFragment} from '../resources/types/WorkspaceResourcesRoot.types';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewResourcesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Resources');\n\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const repoCount = allRepos.length;\n\n  const queryResultOverview = useQuery<OverviewResourcesQuery, OverviewResourcesQueryVariables>(\n    OVERVIEW_RESOURCES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  // Batch up the data and bucket by repo.\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [cachedData, data, visibleRepos]);\n\n  const loading = !data && queryLoading && workspaceLoading;\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return repoBuckets\n      .map(({repoAddress, resources}) => ({\n        repoAddress,\n        resources: resources.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({resources}) => resources.length > 0);\n  }, [repoBuckets, sanitizedSearch]);\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading resources…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching resources\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No resources matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No resources\"\n            description={\n              anyReposHidden\n                ? 'No resources were found in the selected code locations'\n                : 'No resources were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return <OverviewResourcesTable repos={filteredBySearch} />;\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"resources\" refreshState={refreshState} />\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', gap: 12, grow: 0}}\n      >\n        {repoCount > 1 ? <RepoFilterButton /> : null}\n        <TextInput\n          icon=\"search\"\n          value={searchValue}\n          rightElement={\n            showSearchSpinner ? (\n              <SearchInputSpinner tooltipContent=\"Loading resources…\" />\n            ) : undefined\n          }\n          onChange={(e) => setSearchValue(e.target.value)}\n          placeholder=\"Filter by resource name…\"\n          style={{width: '340px'}}\n        />\n      </Box>\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        content()\n      )}\n    </Box>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  resources: ResourceEntryFragment[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewResourcesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, allTopLevelResourceDetails} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (allTopLevelResourceDetails.length > 0) {\n        buckets.push({\n          repoAddress,\n          resources: allTopLevelResourceDetails,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_RESOURCES_QUERY = gql`\n  query OverviewResourcesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                allTopLevelResourceDetails {\n                  id\n                  ...ResourceEntryFragment\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${RESOURCE_ENTRY_FRAGMENT}\n`;\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {\n  VirtualizedScheduleHeader,\n  VirtualizedScheduleRow,\n} from '../workspace/VirtualizedScheduleRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype ScheduleInfo = {name: string; scheduleState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  schedules: ScheduleInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; scheduleCount: number}\n  | {type: 'schedule'; repoAddress: RepoAddress; schedule: ScheduleInfo};\n\nexport const OverviewScheduleTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, schedules}) => {\n      flat.push({type: 'header', repoAddress, scheduleCount: schedules.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        schedules.forEach((schedule) => {\n          flat.push({type: 'schedule', repoAddress, schedule});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <>\n      <div style={{overflow: 'hidden'}}>\n        <Container ref={parentRef}>\n          <VirtualizedScheduleHeader checkbox={headerCheckbox} />\n          <Inner $totalHeight={totalHeight}>\n            {items.map(({index, key, size, start}) => {\n              const row: RowType = flattened[index]!;\n              const type = row!.type;\n              if (type === 'header') {\n                return (\n                  <RepoRow\n                    repoAddress={row.repoAddress}\n                    key={key}\n                    height={size}\n                    start={start}\n                    onToggle={onToggle}\n                    onToggleAll={onToggleAll}\n                    expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                    showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                    rightElement={\n                      <Tooltip\n                        content={\n                          row.scheduleCount === 1 ? '1 schedule' : `${row.scheduleCount} schedules`\n                        }\n                        placement=\"top\"\n                      >\n                        <Tag>{row.scheduleCount}</Tag>\n                      </Tooltip>\n                    }\n                  />\n                );\n              }\n\n              const scheduleKey = makeScheduleKey(row.repoAddress, row.schedule.name);\n\n              return (\n                <VirtualizedScheduleRow\n                  key={key}\n                  name={row.schedule.name}\n                  scheduleState={row.schedule.scheduleState}\n                  showCheckboxColumn={!!headerCheckbox}\n                  checked={checkedKeys.has(scheduleKey)}\n                  onToggleChecked={onToggleCheckFactory(scheduleKey)}\n                  repoAddress={row.repoAddress}\n                  height={size}\n                  start={start}\n                />\n              );\n            })}\n          </Inner>\n        </Container>\n      </div>\n    </>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewScheduleTable} from './OverviewSchedulesTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {\n  OverviewSchedulesQuery,\n  OverviewSchedulesQueryVariables,\n} from './types/OverviewSchedules.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {ScheduleBulkActionMenu} from '../schedules/ScheduleBulkActionMenu';\nimport {SchedulerInfo} from '../schedules/SchedulerInfo';\nimport {makeScheduleKey} from '../schedules/makeScheduleKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const OverviewSchedules = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n  const repoCount = allRepos.length;\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter],\n    [codeLocationFilter, runningStateFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSchedulesQuery, OverviewSchedulesQueryVariables>(\n    OVERVIEW_SCHEDULES_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({schedules, ...rest}) => {\n      return {\n        ...rest,\n        schedules: runningState.size\n          ? schedules.filter(({scheduleState}) => runningState.has(scheduleState.status))\n          : schedules,\n      };\n    });\n  }, [repoBuckets, runningState]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, schedules}) => ({\n        repoAddress,\n        schedules: schedules.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({schedules}) => schedules.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySchedulesVisible = useMemo(\n    () => filteredBySearch.some(({schedules}) => schedules.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all schedules across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSchedules = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, schedules}) => {\n        return schedules\n          .filter(({scheduleState}) => filterPermissionedInstigationState(scheduleState))\n          .map(({name, scheduleState}) => ({\n            repoAddress,\n            scheduleName: name,\n            scheduleState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedScheduleKeys = useMemo(() => {\n    return allPermissionedSchedules.map(({repoAddress, scheduleName}) =>\n      makeScheduleKey(repoAddress, scheduleName),\n    );\n  }, [allPermissionedSchedules]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] = useSelectionReducer(\n    allPermissionedScheduleKeys,\n  );\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, schedules}) => {\n          return schedules.map(({name}) => makeScheduleKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedScheduleKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedScheduleKeys, filteredBySearch]);\n\n  // Determine the list of schedule objects that have been checked by the viewer.\n  // These are the schedules that will be operated on by the bulk start/stop action.\n  const checkedSchedules = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSchedules.filter(({repoAddress, scheduleName}) => {\n      return checkedKeysOnScreen.has(makeScheduleKey(repoAddress, scheduleName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSchedules, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedScheduleKeys.length > 0;\n  const checkedCount = checkedSchedules.length;\n\n  const loading = workspaceLoading && !repoCount && queryLoading && !data;\n\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading schedules…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching schedules\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No schedules matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No schedules\"\n            description={\n              anyReposHidden\n                ? 'No matching schedules were found in the selected code locations'\n                : 'No matching schedules were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewScheduleTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading schedules…\" />\n              ) : undefined\n            }\n            onChange={(e) => {\n              setSearchValue(e.target.value);\n              onToggleAll(false);\n            }}\n            placeholder=\"Filter by schedule name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Tooltip\n          content=\"You do not have permission to start or stop these schedules\"\n          canShow={anySchedulesVisible && !viewerHasAnyInstigationPermission}\n          placement=\"top-end\"\n          useDisabledButtonTooltipFix\n        >\n          <ScheduleBulkActionMenu\n            schedules={checkedSchedules}\n            onDone={() => refreshState.refetch()}\n          />\n        </Tooltip>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading && !repoCount ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SchedulerInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\ntype RepoBucket = {\n  repoAddress: RepoAddress;\n  schedules: {name: string; scheduleState: BasicInstigationStateFragment}[];\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSchedulesQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n): RepoBucket[] => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, schedules} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n      const scheduleNames = schedules.map(({name, scheduleState}) => ({name, scheduleState}));\n\n      if (scheduleNames.length > 0) {\n        buckets.push({\n          repoAddress,\n          schedules: scheduleNames,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SCHEDULES_QUERY = gql`\n  query OverviewSchedulesQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                schedules {\n                  id\n                  name\n                  description\n                  scheduleState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSchedules} from './OverviewSchedules';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSchedulesRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Schedules');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"schedules\" />\n      <OverviewSchedules />\n    </Box>\n  );\n};\n","import {Tag, Tooltip} from '@dagster-io/ui-components';\nimport {useVirtualizer} from '@tanstack/react-virtual';\nimport * as React from 'react';\n\nimport {OVERVIEW_COLLAPSED_KEY} from './OverviewExpansionKey';\nimport {BasicInstigationStateFragment} from './types/BasicInstigationStateFragment.types';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {Container, Inner} from '../ui/VirtualizedTable';\nimport {findDuplicateRepoNames} from '../ui/findDuplicateRepoNames';\nimport {useRepoExpansionState} from '../ui/useRepoExpansionState';\nimport {VirtualizedSensorHeader, VirtualizedSensorRow} from '../workspace/VirtualizedSensorRow';\nimport {RepoRow} from '../workspace/VirtualizedWorkspaceTable';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ntype SensorInfo = {name: string; sensorState: BasicInstigationStateFragment};\n\ntype Repository = {\n  repoAddress: RepoAddress;\n  sensors: SensorInfo[];\n};\n\ninterface Props {\n  repos: Repository[];\n  headerCheckbox: React.ReactNode;\n  checkedKeys: Set<string>;\n  onToggleCheckFactory: (path: string) => (values: {checked: boolean; shiftKey: boolean}) => void;\n}\n\ntype RowType =\n  | {type: 'header'; repoAddress: RepoAddress; sensorCount: number}\n  | {type: 'sensor'; repoAddress: RepoAddress; sensor: SensorInfo};\n\nexport const OverviewSensorTable = ({\n  repos,\n  headerCheckbox,\n  checkedKeys,\n  onToggleCheckFactory,\n}: Props) => {\n  const parentRef = React.useRef<HTMLDivElement | null>(null);\n  const allKeys = React.useMemo(\n    () => repos.map(({repoAddress}) => repoAddressAsHumanString(repoAddress)),\n    [repos],\n  );\n  const {expandedKeys, onToggle, onToggleAll} = useRepoExpansionState(\n    OVERVIEW_COLLAPSED_KEY,\n    allKeys,\n  );\n\n  const flattened: RowType[] = React.useMemo(() => {\n    const flat: RowType[] = [];\n    repos.forEach(({repoAddress, sensors}) => {\n      flat.push({type: 'header', repoAddress, sensorCount: sensors.length});\n      const repoKey = repoAddressAsHumanString(repoAddress);\n      if (expandedKeys.includes(repoKey)) {\n        sensors.forEach((sensor) => {\n          flat.push({type: 'sensor', repoAddress, sensor});\n        });\n      }\n    });\n    return flat;\n  }, [repos, expandedKeys]);\n\n  const duplicateRepoNames = findDuplicateRepoNames(repos.map(({repoAddress}) => repoAddress.name));\n\n  const rowVirtualizer = useVirtualizer({\n    count: flattened.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (ii: number) => {\n      const row = flattened[ii];\n      return row?.type === 'header' ? 32 : 64;\n    },\n    overscan: 10,\n  });\n\n  const totalHeight = rowVirtualizer.getTotalSize();\n  const items = rowVirtualizer.getVirtualItems();\n\n  return (\n    <div style={{overflow: 'hidden'}}>\n      <Container ref={parentRef}>\n        <VirtualizedSensorHeader checkbox={headerCheckbox} />\n        <Inner $totalHeight={totalHeight}>\n          {items.map(({index, key, size, start}) => {\n            const row: RowType = flattened[index]!;\n            const type = row!.type;\n            if (type === 'header') {\n              return (\n                <RepoRow\n                  repoAddress={row.repoAddress}\n                  key={key}\n                  height={size}\n                  start={start}\n                  onToggle={onToggle}\n                  onToggleAll={onToggleAll}\n                  expanded={expandedKeys.includes(repoAddressAsHumanString(row.repoAddress))}\n                  showLocation={duplicateRepoNames.has(row.repoAddress.name)}\n                  rightElement={\n                    <Tooltip\n                      content={row.sensorCount === 1 ? '1 sensor' : `${row.sensorCount} sensors`}\n                      placement=\"top\"\n                    >\n                      <Tag>{row.sensorCount}</Tag>\n                    </Tooltip>\n                  }\n                />\n              );\n            }\n\n            const sensorKey = makeSensorKey(row.repoAddress, row.sensor.name);\n\n            return (\n              <VirtualizedSensorRow\n                key={key}\n                name={row.sensor.name}\n                sensorState={row.sensor.sensorState}\n                showCheckboxColumn={!!headerCheckbox}\n                checked={checkedKeys.has(sensorKey)}\n                onToggleChecked={onToggleCheckFactory(sensorKey)}\n                repoAddress={row.repoAddress}\n                height={size}\n                start={start}\n              />\n            );\n          })}\n        </Inner>\n      </Container>\n    </div>\n  );\n};\n","import {Box, Colors, NonIdealState, Spinner, TextInput, Tooltip} from '@dagster-io/ui-components';\nimport {useContext, useMemo} from 'react';\n\nimport {BASIC_INSTIGATION_STATE_FRAGMENT} from './BasicInstigationStateFragment';\nimport {OverviewSensorTable} from './OverviewSensorsTable';\nimport {sortRepoBuckets} from './sortRepoBuckets';\nimport {OverviewSensorsQuery, OverviewSensorsQueryVariables} from './types/OverviewSensors.types';\nimport {visibleRepoKeys} from './visibleRepoKeys';\nimport {gql, useQuery} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {SensorType} from '../graphql/types';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {useSelectionReducer} from '../hooks/useSelectionReducer';\nimport {INSTANCE_HEALTH_FRAGMENT} from '../instance/InstanceHealthFragment';\nimport {filterPermissionedInstigationState} from '../instigation/filterPermissionedInstigationState';\nimport {SensorBulkActionMenu} from '../sensors/SensorBulkActionMenu';\nimport {SensorInfo} from '../sensors/SensorInfo';\nimport {makeSensorKey} from '../sensors/makeSensorKey';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\nimport {CheckAllBox} from '../ui/CheckAllBox';\nimport {useCodeLocationFilter} from '../ui/Filters/useCodeLocationFilter';\nimport {useInstigationStatusFilter} from '../ui/Filters/useInstigationStatusFilter';\nimport {SearchInputSpinner} from '../ui/SearchInputSpinner';\nimport {SENSOR_TYPE_META} from '../workspace/VirtualizedSensorRow';\nimport {WorkspaceContext} from '../workspace/WorkspaceContext/WorkspaceContext';\nimport {WorkspaceLocationNodeFragment} from '../workspace/WorkspaceContext/types/WorkspaceQueries.types';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nfunction toSetFilterValue(type: SensorType) {\n  const label = SENSOR_TYPE_META[type].name;\n  return {\n    label,\n    value: {type, label},\n    match: [label],\n  };\n}\n\nconst SENSOR_TYPE_TO_FILTER: Partial<Record<SensorType, ReturnType<typeof toSetFilterValue>>> = {\n  [SensorType.ASSET]: toSetFilterValue(SensorType.ASSET),\n  [SensorType.AUTO_MATERIALIZE]: toSetFilterValue(SensorType.AUTO_MATERIALIZE),\n  [SensorType.AUTOMATION]: toSetFilterValue(SensorType.AUTOMATION),\n  [SensorType.FRESHNESS_POLICY]: toSetFilterValue(SensorType.FRESHNESS_POLICY),\n  [SensorType.MULTI_ASSET]: toSetFilterValue(SensorType.MULTI_ASSET),\n  [SensorType.RUN_STATUS]: toSetFilterValue(SensorType.RUN_STATUS),\n  [SensorType.STANDARD]: toSetFilterValue(SensorType.STANDARD),\n};\nconst ALL_SENSOR_TYPE_FILTERS = Object.values(SENSOR_TYPE_TO_FILTER);\n\nexport const OverviewSensors = () => {\n  const {\n    allRepos,\n    visibleRepos,\n    loading: workspaceLoading,\n    data: cachedData,\n  } = useContext(WorkspaceContext);\n\n  const [searchValue, setSearchValue] = useQueryPersistedState<string>({\n    queryKey: 'search',\n    defaults: {search: ''},\n  });\n\n  const [sensorTypes, setSensorTypes] = useQueryPersistedState<Set<SensorType>>({\n    encode: (vals) => ({sensorType: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.sensorType?.split(',') as SensorType[]) || []),\n  });\n\n  const codeLocationFilter = useCodeLocationFilter();\n  const runningStateFilter = useInstigationStatusFilter();\n  const sensorTypeFilter = useStaticSetFilter({\n    name: 'Sensor type',\n    allValues: ALL_SENSOR_TYPE_FILTERS,\n    icon: 'sensors',\n    getStringValue: (value) => value.label,\n    state: useMemo(() => {\n      return new Set(Array.from(sensorTypes).map((type) => SENSOR_TYPE_TO_FILTER[type]!.value));\n    }, [sensorTypes]),\n\n    renderLabel: ({value}) => <span>{value.label}</span>,\n    onStateChanged: (state) => {\n      setSensorTypes(new Set(Array.from(state).map((value) => value.type)));\n    },\n  });\n\n  const filters = useMemo(\n    () => [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n    [codeLocationFilter, runningStateFilter, sensorTypeFilter],\n  );\n  const {button: filterButton, activeFiltersJsx} = useFilters({filters});\n\n  const queryResultOverview = useQuery<OverviewSensorsQuery, OverviewSensorsQueryVariables>(\n    OVERVIEW_SENSORS_QUERY,\n    {\n      fetchPolicy: 'network-only',\n      notifyOnNetworkStatusChange: true,\n    },\n  );\n  const {data, loading: queryLoading} = queryResultOverview;\n\n  const refreshState = useQueryRefreshAtInterval(queryResultOverview, FIFTEEN_SECONDS);\n\n  const repoBuckets = useMemo(() => {\n    const cachedEntries = Object.values(cachedData).filter(\n      (location): location is Extract<typeof location, {__typename: 'WorkspaceLocationEntry'}> =>\n        location.__typename === 'WorkspaceLocationEntry',\n    );\n    const workspaceOrError = data?.workspaceOrError;\n    const entries =\n      workspaceOrError?.__typename === 'Workspace'\n        ? workspaceOrError.locationEntries\n        : cachedEntries;\n    const visibleKeys = visibleRepoKeys(visibleRepos);\n    return buildBuckets(entries).filter(({repoAddress}) =>\n      visibleKeys.has(repoAddressAsHumanString(repoAddress)),\n    );\n  }, [data, cachedData, visibleRepos]);\n\n  const {state: runningState} = runningStateFilter;\n\n  const filteredBuckets = useMemo(() => {\n    return repoBuckets.map(({sensors, ...rest}) => {\n      return {\n        ...rest,\n        sensors: sensors.filter(({sensorState, sensorType}) => {\n          if (runningState.size && !runningState.has(sensorState.status)) {\n            return false;\n          }\n          if (sensorTypes.size && !sensorTypes.has(sensorType)) {\n            return false;\n          }\n          return true;\n        }),\n      };\n    });\n  }, [repoBuckets, runningState, sensorTypes]);\n\n  const sanitizedSearch = searchValue.trim().toLocaleLowerCase();\n  const anySearch = sanitizedSearch.length > 0;\n\n  const filteredBySearch = useMemo(() => {\n    const searchToLower = sanitizedSearch.toLocaleLowerCase();\n    return filteredBuckets\n      .map(({repoAddress, sensors}) => ({\n        repoAddress,\n        sensors: sensors.filter(({name}) => name.toLocaleLowerCase().includes(searchToLower)),\n      }))\n      .filter(({sensors}) => sensors.length > 0);\n  }, [filteredBuckets, sanitizedSearch]);\n\n  const anySensorsVisible = useMemo(\n    () => filteredBySearch.some(({sensors}) => sensors.length > 0),\n    [filteredBySearch],\n  );\n\n  // Collect all sensors across visible code locations that the viewer has permission\n  // to start or stop.\n  const allPermissionedSensors = useMemo(() => {\n    return repoBuckets\n      .map(({repoAddress, sensors}) => {\n        return sensors\n          .filter(({sensorState}) => filterPermissionedInstigationState(sensorState))\n          .map(({name, sensorState}) => ({\n            repoAddress,\n            sensorName: name,\n            sensorState,\n          }));\n      })\n      .flat();\n  }, [repoBuckets]);\n\n  // Build a list of keys from the permissioned schedules for use in checkbox state.\n  // This includes collapsed code locations.\n  const allPermissionedSensorKeys = useMemo(() => {\n    return allPermissionedSensors.map(({repoAddress, sensorName}) =>\n      makeSensorKey(repoAddress, sensorName),\n    );\n  }, [allPermissionedSensors]);\n\n  const [{checkedIds: checkedKeys}, {onToggleFactory, onToggleAll}] =\n    useSelectionReducer(allPermissionedSensorKeys);\n\n  // Filter to find keys that are visible given any text search.\n  const permissionedKeysOnScreen = useMemo(() => {\n    const filteredKeys = new Set(\n      filteredBySearch\n        .map(({repoAddress, sensors}) => {\n          return sensors.map(({name}) => makeSensorKey(repoAddress, name));\n        })\n        .flat(),\n    );\n    return allPermissionedSensorKeys.filter((key) => filteredKeys.has(key));\n  }, [allPermissionedSensorKeys, filteredBySearch]);\n\n  // Determine the list of sensor objects that have been checked by the viewer.\n  // These are the sensors that will be operated on by the bulk start/stop action.\n  const checkedSensors = useMemo(() => {\n    const checkedKeysOnScreen = new Set(\n      permissionedKeysOnScreen.filter((key: string) => checkedKeys.has(key)),\n    );\n    return allPermissionedSensors.filter(({repoAddress, sensorName}) => {\n      return checkedKeysOnScreen.has(makeSensorKey(repoAddress, sensorName));\n    });\n  }, [permissionedKeysOnScreen, allPermissionedSensors, checkedKeys]);\n\n  const viewerHasAnyInstigationPermission = allPermissionedSensorKeys.length > 0;\n  const checkedCount = checkedSensors.length;\n\n  const loading = workspaceLoading && queryLoading && !data;\n  const content = () => {\n    if (loading) {\n      return (\n        <Box flex={{direction: 'row', justifyContent: 'center'}} style={{paddingTop: '100px'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 16}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading sensors…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const anyReposHidden = allRepos.length > visibleRepos.length;\n\n    if (!filteredBySearch.length) {\n      if (anySearch) {\n        return (\n          <Box padding={{top: 20}}>\n            <NonIdealState\n              icon=\"search\"\n              title=\"No matching sensors\"\n              description={\n                anyReposHidden ? (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in the selected\n                    code locations\n                  </div>\n                ) : (\n                  <div>\n                    No sensors matching <strong>{searchValue}</strong> were found in your\n                    definitions\n                  </div>\n                )\n              }\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{top: 20}}>\n          <NonIdealState\n            icon=\"search\"\n            title=\"No sensors\"\n            description={\n              anyReposHidden\n                ? 'No sensors were found in the selected code locations'\n                : 'No sensors were found in your definitions'\n            }\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <OverviewSensorTable\n        headerCheckbox={\n          viewerHasAnyInstigationPermission ? (\n            <CheckAllBox\n              checkedCount={checkedCount}\n              totalCount={permissionedKeysOnScreen.length}\n              onToggleAll={onToggleAll}\n            />\n          ) : undefined\n        }\n        repos={filteredBySearch}\n        checkedKeys={checkedKeys}\n        onToggleCheckFactory={onToggleFactory}\n      />\n    );\n  };\n\n  const showSearchSpinner = queryLoading && !data;\n\n  return (\n    <>\n      <Box\n        padding={{horizontal: 24, vertical: 16}}\n        flex={{\n          direction: 'row',\n          alignItems: 'center',\n          justifyContent: 'space-between',\n          gap: 12,\n          grow: 0,\n        }}\n      >\n        <Box flex={{direction: 'row', gap: 12}}>\n          {filterButton}\n          <TextInput\n            icon=\"search\"\n            value={searchValue}\n            rightElement={\n              showSearchSpinner ? (\n                <SearchInputSpinner tooltipContent=\"Loading sensors…\" />\n              ) : undefined\n            }\n            onChange={(e) => setSearchValue(e.target.value)}\n            placeholder=\"Filter by sensor name…\"\n            style={{width: '340px'}}\n          />\n        </Box>\n        <Box flex={{direction: 'row', gap: 12, alignItems: 'center'}}>\n          <QueryRefreshCountdown refreshState={refreshState} />\n          <Tooltip\n            content=\"You do not have permission to start or stop these schedules\"\n            canShow={anySensorsVisible && !viewerHasAnyInstigationPermission}\n            placement=\"top-end\"\n            useDisabledButtonTooltipFix\n          >\n            <SensorBulkActionMenu sensors={checkedSensors} onDone={() => refreshState.refetch()} />\n          </Tooltip>\n        </Box>\n      </Box>\n      {activeFiltersJsx.length ? (\n        <Box\n          padding={{vertical: 8, horizontal: 24}}\n          border=\"top-and-bottom\"\n          flex={{direction: 'row', gap: 8}}\n        >\n          {activeFiltersJsx}\n        </Box>\n      ) : null}\n      {loading ? (\n        <Box padding={64}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      ) : (\n        <>\n          <SensorInfo\n            daemonHealth={data?.instance.daemonHealth}\n            padding={{vertical: 16, horizontal: 24}}\n            border=\"top\"\n          />\n          {content()}\n        </>\n      )}\n    </>\n  );\n};\n\nconst buildBuckets = (\n  locationEntries:\n    | Extract<\n        OverviewSensorsQuery['workspaceOrError'],\n        {__typename: 'Workspace'}\n      >['locationEntries']\n    | Extract<WorkspaceLocationNodeFragment, {__typename: 'WorkspaceLocationEntry'}>[],\n) => {\n  const entries = locationEntries.map((entry) => entry.locationOrLoadError);\n\n  const buckets = [];\n\n  for (const entry of entries) {\n    if (entry?.__typename !== 'RepositoryLocation') {\n      continue;\n    }\n\n    for (const repo of entry.repositories) {\n      const {name, sensors} = repo;\n      const repoAddress = buildRepoAddress(name, entry.name);\n\n      if (sensors.length > 0) {\n        buckets.push({\n          repoAddress,\n          sensors,\n        });\n      }\n    }\n  }\n\n  return sortRepoBuckets(buckets);\n};\n\nconst OVERVIEW_SENSORS_QUERY = gql`\n  query OverviewSensorsQuery {\n    workspaceOrError {\n      ... on Workspace {\n        id\n        locationEntries {\n          id\n          locationOrLoadError {\n            ... on RepositoryLocation {\n              id\n              name\n              repositories {\n                id\n                name\n                sensors {\n                  id\n                  name\n                  description\n                  sensorType\n                  sensorState {\n                    id\n                    ...BasicInstigationStateFragment\n                  }\n                }\n              }\n            }\n            ...PythonErrorFragment\n          }\n        }\n      }\n      ...PythonErrorFragment\n    }\n    instance {\n      id\n      ...InstanceHealthFragment\n    }\n  }\n\n  ${BASIC_INSTIGATION_STATE_FRAGMENT}\n  ${PYTHON_ERROR_FRAGMENT}\n  ${INSTANCE_HEALTH_FRAGMENT}\n`;\n","import {Box} from '@dagster-io/ui-components';\n\nimport {OverviewPageHeader} from './OverviewPageHeader';\nimport {OverviewSensors} from './OverviewSensors';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\n\nexport const OverviewSensorsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Sensors');\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <OverviewPageHeader tab=\"sensors\" />\n      <OverviewSensors />\n    </Box>\n  );\n};\n","import {useEffect, useMemo} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {\n  AutomaterializationEvaluationHistoryTable,\n  AutomaterializationTickStatusDisplay,\n  AutomaterializationTickStatusDisplayMappings,\n} from './AutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {useCursorPaginatedQuery} from '../../runs/useCursorPaginatedQuery';\n\nconst PAGE_SIZE = 15;\n\ninterface Props {\n  setSelectedTick: (tick: AssetDaemonTickFragment | null) => void;\n  setTableView: (view: 'evaluations' | 'runs') => void;\n  setTimerange: (range?: [number, number]) => void;\n  setParentStatuses: (statuses?: InstigationTickStatus[]) => void;\n}\n\nexport const InstanceAutomaterializationEvaluationHistoryTable = ({\n  setSelectedTick,\n  setTableView,\n  setTimerange,\n  setParentStatuses,\n}: Props) => {\n  const [tickStatus, setTickStatus] = useQueryPersistedState<AutomaterializationTickStatusDisplay>({\n    queryKey: 'status',\n    defaults: {status: AutomaterializationTickStatusDisplay.ALL},\n  });\n\n  const statuses = useMemo(\n    () =>\n      AutomaterializationTickStatusDisplayMappings[tickStatus] ||\n      AutomaterializationTickStatusDisplayMappings[AutomaterializationTickStatusDisplay.ALL],\n    [tickStatus],\n  );\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    AssetDaemonTicksQuery,\n    AssetDaemonTicksQueryVariables\n  >({\n    query: ASSET_DAEMON_TICKS_QUERY,\n    variables: {\n      statuses: useMemo(() => Array.from(statuses), [statuses]),\n    },\n    nextCursorForResult: (data) => {\n      const ticks = data.autoMaterializeTicks;\n      if (!ticks.length) {\n        return undefined;\n      }\n      return ticks[PAGE_SIZE - 1]?.id;\n    },\n    getResultArray: (data) => {\n      if (!data?.autoMaterializeTicks) {\n        return [];\n      }\n      return data.autoMaterializeTicks;\n    },\n    pageSize: PAGE_SIZE,\n  });\n\n  // Only refresh if we're on the first page\n  useQueryRefreshAtInterval(queryResult, 10000, !paginationProps.hasPrevCursor);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      const ticks = queryResult.data?.autoMaterializeTicks;\n      if (ticks && ticks.length) {\n        const start = ticks[ticks.length - 1]?.timestamp;\n        const end = ticks[0]?.endTimestamp;\n        if (start && end) {\n          setTimerange([start, end]);\n        }\n      }\n    } else {\n      setTimerange(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, queryResult.data?.autoMaterializeTicks, setTimerange]);\n\n  useEffect(() => {\n    if (paginationProps.hasPrevCursor) {\n      setParentStatuses(Array.from(statuses));\n    } else {\n      setParentStatuses(undefined);\n    }\n  }, [paginationProps.hasPrevCursor, setParentStatuses, statuses]);\n\n  return (\n    <AutomaterializationEvaluationHistoryTable\n      loading={queryResult.loading}\n      ticks={queryResult.data?.autoMaterializeTicks || []}\n      paginationProps={paginationProps}\n      setSelectedTick={setSelectedTick}\n      setTableView={setTableView}\n      tickStatus={tickStatus}\n      setTickStatus={setTickStatus}\n    />\n  );\n};\n","import {Box, Checkbox, Colors, Spinner, Subtitle2, Table} from '@dagster-io/ui-components';\nimport {useCallback, useMemo, useState} from 'react';\n\nimport {ASSET_DAEMON_TICKS_QUERY} from './AssetDaemonTicksQuery';\nimport {AutomaterializationTickDetailDialog} from './AutomaterializationTickDetailDialog';\nimport {AutomaterializeRunHistoryTable} from './AutomaterializeRunHistoryTable';\nimport {DeclarativeAutomationBanner} from './DeclarativeAutomationBanner';\nimport {InstanceAutomaterializationEvaluationHistoryTable} from './InstanceAutomaterializationEvaluationHistoryTable';\nimport {\n  AssetDaemonTickFragment,\n  AssetDaemonTicksQuery,\n  AssetDaemonTicksQueryVariables,\n} from './types/AssetDaemonTicksQuery.types';\nimport {useLazyQuery} from '../../apollo-client';\nimport {useConfirmation} from '../../app/CustomConfirmationProvider';\nimport {useUnscopedPermissions} from '../../app/Permissions';\nimport {useRefreshAtInterval} from '../../app/QueryRefresh';\nimport {InstigationTickStatus} from '../../graphql/types';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {LiveTickTimeline} from '../../instigation/LiveTickTimeline2';\nimport {isStuckStartedTick} from '../../instigation/util';\nimport {useAutomaterializeDaemonStatus} from '../useAutomaterializeDaemonStatus';\n\nconst MINUTE = 60 * 1000;\nconst THREE_MINUTES = 3 * MINUTE;\nconst FIVE_MINUTES = 5 * MINUTE;\nconst TWENTY_MINUTES = 20 * MINUTE;\n\nexport const GlobalAutomaterializationContent = () => {\n  const automaterialize = useAutomaterializeDaemonStatus();\n  const confirm = useConfirmation();\n\n  const {permissions: {canToggleAutoMaterialize} = {}} = useUnscopedPermissions();\n\n  const [isPaused, setIsPaused] = useState(false);\n  const [statuses, setStatuses] = useState<undefined | InstigationTickStatus[]>(undefined);\n  const [timeRange, setTimerange] = useState<undefined | [number, number]>(undefined);\n  const getVariables = useCallback(\n    (now = Date.now()) => {\n      if (timeRange || statuses) {\n        return {\n          afterTimestamp: timeRange?.[0],\n          beforeTimestamp: timeRange?.[1],\n          statuses,\n        };\n      }\n      return {\n        afterTimestamp: (now - TWENTY_MINUTES) / 1000,\n      };\n    },\n    [statuses, timeRange],\n  );\n\n  const [fetch, queryResult] = useLazyQuery<AssetDaemonTicksQuery, AssetDaemonTicksQueryVariables>(\n    ASSET_DAEMON_TICKS_QUERY,\n  );\n\n  const refresh = useCallback(\n    async () => await fetch({variables: getVariables()}),\n    [fetch, getVariables],\n  );\n\n  useRefreshAtInterval({\n    refresh,\n    enabled: !isPaused && !timeRange && !statuses,\n    intervalMs: 2 * 1000,\n    leading: true,\n  });\n\n  const [selectedTick, setSelectedTick] = useState<AssetDaemonTickFragment | null>(null);\n\n  const [tableView, setTableView] = useQueryPersistedState<'evaluations' | 'runs'>(\n    useMemo(\n      () => ({\n        queryKey: 'view',\n        decode: ({view}) => (view === 'runs' ? 'runs' : 'evaluations'),\n        encode: (raw) => {\n          return {view: raw, cursor: undefined, statuses: undefined};\n        },\n      }),\n      [],\n    ),\n  );\n\n  const data = queryResult.data ?? queryResult.previousData;\n\n  const allTicks = useMemo(() => {\n    return data?.autoMaterializeTicks || [];\n  }, [data]);\n\n  const ticks = useMemo(\n    () => {\n      return (\n        allTicks?.map((tick, index) => {\n          const nextTick = allTicks[index - 1];\n          // For ticks that get stuck in \"Started\" state without an endTimestamp.\n          if (nextTick && isStuckStartedTick(tick, index)) {\n            const copy = {...tick};\n            copy.endTimestamp = nextTick.timestamp;\n            copy.status = InstigationTickStatus.FAILURE;\n            return copy;\n          }\n          return tick;\n        }) ?? []\n      );\n    },\n    // The allTicks array changes every 2 seconds because we query every 2 seconds.\n    // This would cause everything to re-render, to avoid that we memoize the ticks array that we pass around\n    // using the ID and status of the ticks.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(allTicks.map((tick) => `${tick.id}:${tick.status}`))],\n  );\n\n  const onHoverTick = useCallback(\n    (tick: AssetDaemonTickFragment | undefined) => {\n      setIsPaused(!!tick);\n    },\n    [setIsPaused],\n  );\n\n  return (\n    <>\n      <Box padding={{vertical: 12, horizontal: 24}}>\n        <DeclarativeAutomationBanner />\n      </Box>\n      <Table>\n        <tbody>\n          <tr>\n            <td>Running</td>\n            <td>\n              {automaterialize.loading ? (\n                <Spinner purpose=\"body-text\" />\n              ) : (\n                <Checkbox\n                  format=\"switch\"\n                  checked={!automaterialize.paused}\n                  disabled={!canToggleAutoMaterialize}\n                  onChange={async (e) => {\n                    const checked = e.target.checked;\n                    if (!checked) {\n                      await confirm({\n                        title: 'Pause Auto-materializing?',\n                        description:\n                          'Pausing Auto-materializing will prevent new materializations triggered by an Auto-materializing policy.',\n                      });\n                    }\n                    automaterialize.setPaused(!checked);\n                  }}\n                />\n              )}\n            </td>\n          </tr>\n          <tr>\n            <td>Evaluation frequency</td>\n            <td>~30s</td>\n          </tr>\n        </tbody>\n      </Table>\n      <Box padding={{vertical: 12, horizontal: 24}} border=\"bottom\">\n        <Subtitle2>Evaluation timeline</Subtitle2>\n      </Box>\n      {!data ? (\n        <Box\n          padding={{vertical: 48}}\n          flex={{direction: 'row', justifyContent: 'center', gap: 12, alignItems: 'center'}}\n        >\n          <Spinner purpose=\"body-text\" />\n          <div style={{color: Colors.textLight()}}>Loading evaluations…</div>\n        </Box>\n      ) : (\n        <>\n          <LiveTickTimeline\n            ticks={ticks}\n            onHoverTick={onHoverTick}\n            onSelectTick={setSelectedTick}\n            exactRange={timeRange}\n            timeRange={TWENTY_MINUTES}\n            tickGrid={FIVE_MINUTES}\n            timeAfter={THREE_MINUTES}\n          />\n          <AutomaterializationTickDetailDialog\n            tick={selectedTick}\n            isOpen={!!selectedTick}\n            close={() => {\n              setSelectedTick(null);\n            }}\n          />\n          {tableView === 'evaluations' ? (\n            <InstanceAutomaterializationEvaluationHistoryTable\n              setSelectedTick={setSelectedTick}\n              setTableView={setTableView}\n              setParentStatuses={setStatuses}\n              setTimerange={setTimerange}\n            />\n          ) : (\n            <AutomaterializeRunHistoryTable setTableView={setTableView} />\n          )}\n        </>\n      )}\n    </>\n  );\n};\n","import {Page} from '@dagster-io/ui-components';\nimport {Redirect} from 'react-router-dom';\n\nimport {GlobalAutomaterializationContent} from './GlobalAutomaterializationContent';\nimport {useFeatureFlags} from '../../app/Flags';\nimport {assertUnreachable} from '../../app/Util';\nimport {useTrackPageView} from '../../app/analytics';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../../overview/OverviewPageHeader';\nimport {useAutoMaterializeSensorFlag} from '../AutoMaterializeSensorFlag';\n\n// Determine whether the user is flagged to see automaterialize policies as\n// sensors. If so, redirect to either the merged Automations page or the Sensors overview,\n// depending on their nav flag state.\nexport const AutomaterializationRoot = () => {\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  const {flagSettingsPage} = useFeatureFlags();\n  switch (automaterializeSensorsFlagState) {\n    case 'unknown':\n      return <div />; // Waiting for result\n    case 'has-global-amp':\n      return <GlobalAutomaterializationRoot />;\n    case 'has-sensor-amp':\n      return <Redirect to={flagSettingsPage ? '/automation' : '/overview/sensors'} />;\n    default:\n      assertUnreachable(automaterializeSensorsFlagState);\n  }\n};\n\nconst GlobalAutomaterializationRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Auto-materialize');\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"amp\" />\n      <GlobalAutomaterializationContent />\n    </Page>\n  );\n};\n","import {\n  Box,\n  Colors,\n  CursorPaginationControls,\n  NonIdealState,\n  Spinner,\n} from '@dagster-io/ui-components';\n\nimport {BACKFILL_TABLE_FRAGMENT, BackfillTable} from './backfill/BackfillTable';\nimport {\n  InstanceBackfillsQuery,\n  InstanceBackfillsQueryVariables,\n} from './types/InstanceBackfills.types';\nimport {gql} from '../apollo-client';\nimport {PYTHON_ERROR_FRAGMENT} from '../app/PythonErrorFragment';\nimport {PythonErrorInfo} from '../app/PythonErrorInfo';\nimport {\n  FIFTEEN_SECONDS,\n  QueryRefreshCountdown,\n  useQueryRefreshAtInterval,\n} from '../app/QueryRefresh';\nimport {useTrackPageView} from '../app/analytics';\nimport {BulkActionStatus} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../hooks/useQueryPersistedState';\nimport {DaemonNotRunningAlert, useIsBackfillDaemonHealthy} from '../partitions/BackfillMessaging';\nimport {useCursorPaginatedQuery} from '../runs/useCursorPaginatedQuery';\nimport {useFilters} from '../ui/BaseFilters';\nimport {useStaticSetFilter} from '../ui/BaseFilters/useStaticSetFilter';\n\nconst PAGE_SIZE = 10;\n\nconst labelForBackfillStatus = (key: BulkActionStatus) => {\n  switch (key) {\n    case BulkActionStatus.CANCELED:\n      return 'Canceled';\n    case BulkActionStatus.CANCELING:\n      return 'Canceling';\n    case BulkActionStatus.COMPLETED:\n      return 'Completed';\n    case BulkActionStatus.FAILED:\n      return 'Failed';\n    case BulkActionStatus.REQUESTED:\n      return 'In progress';\n    case BulkActionStatus.COMPLETED_SUCCESS:\n      return 'Success';\n    case BulkActionStatus.COMPLETED_FAILED:\n      return 'Failed';\n  }\n};\n\nconst backfillStatusValues = Object.keys(BulkActionStatus).map((key) => {\n  const status = key as BulkActionStatus;\n  const label = labelForBackfillStatus(status);\n  return {\n    label,\n    value: status,\n    match: [status, label],\n  };\n});\n\nexport const InstanceBackfills = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  const [statusState, setStatusState] = useQueryPersistedState<Set<BulkActionStatus>>({\n    encode: (vals) => ({status: vals.size ? Array.from(vals).join(',') : undefined}),\n    decode: (qs) => new Set((qs.status?.split(',') as BulkActionStatus[]) || []),\n  });\n  const statusFilter = useStaticSetFilter<BulkActionStatus>({\n    name: 'Status',\n    icon: 'status',\n    allValues: backfillStatusValues,\n    allowMultipleSelections: false,\n    closeOnSelect: true,\n    renderLabel: ({value}) => <div>{labelForBackfillStatus(value)}</div>,\n    getStringValue: (status) => labelForBackfillStatus(status),\n    state: statusState,\n    onStateChanged: setStatusState,\n  });\n\n  const {button, activeFiltersJsx} = useFilters({filters: [statusFilter]});\n\n  const {queryResult, paginationProps} = useCursorPaginatedQuery<\n    InstanceBackfillsQuery,\n    InstanceBackfillsQueryVariables\n  >({\n    query: BACKFILLS_QUERY,\n    variables: {\n      status: statusState.size > 0 ? Array.from(statusState)[0]! : undefined,\n    },\n    pageSize: PAGE_SIZE,\n    nextCursorForResult: (result) =>\n      result.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results[PAGE_SIZE - 1]?.id\n        : undefined,\n    getResultArray: (result) =>\n      result?.partitionBackfillsOrError.__typename === 'PartitionBackfills'\n        ? result.partitionBackfillsOrError.results\n        : [],\n  });\n\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n  const refreshState = useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n  const {loading, data} = queryResult;\n\n  const content = () => {\n    if (loading && !data) {\n      return (\n        <Box padding={{vertical: 64}} flex={{direction: 'column', alignItems: 'center'}}>\n          <Box flex={{direction: 'row', alignItems: 'center', gap: 8}}>\n            <Spinner purpose=\"body-text\" />\n            <div style={{color: Colors.textLight()}}>Loading backfills…</div>\n          </Box>\n        </Box>\n      );\n    }\n\n    const partitionBackfillsOrError = data?.partitionBackfillsOrError;\n    if (partitionBackfillsOrError?.__typename === 'PythonError') {\n      return <PythonErrorInfo error={partitionBackfillsOrError} />;\n    }\n\n    if (!partitionBackfillsOrError || !partitionBackfillsOrError?.results.length) {\n      if (statusState.size > 0) {\n        return (\n          <Box padding={{vertical: 64}}>\n            <NonIdealState\n              icon=\"no-results\"\n              title=\"No matching backfills\"\n              description=\"No backfills were found for this filter.\"\n            />\n          </Box>\n        );\n      }\n\n      return (\n        <Box padding={{vertical: 64}}>\n          <NonIdealState\n            icon=\"no-results\"\n            title=\"No backfills found\"\n            description=\"This instance does not have any backfill jobs.\"\n          />\n        </Box>\n      );\n    }\n\n    return (\n      <div>\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n        <BackfillTable\n          backfills={partitionBackfillsOrError.results.slice(0, PAGE_SIZE)}\n          refetch={queryResult.refetch}\n        />\n        {partitionBackfillsOrError.results.length > 0 ? (\n          <Box margin={{top: 16}}>\n            <CursorPaginationControls {...paginationProps} />\n          </Box>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <Box\n        padding={{vertical: 12, horizontal: 20}}\n        flex={{direction: 'row', alignItems: 'center', justifyContent: 'space-between'}}\n      >\n        <Box flex={{direction: 'column', gap: 8}}>\n          <div>{button}</div>\n          {activeFiltersJsx}\n        </Box>\n        <QueryRefreshCountdown refreshState={refreshState} />\n      </Box>\n      {content()}\n    </>\n  );\n};\n\nconst BACKFILLS_QUERY = gql`\n  query InstanceBackfillsQuery($status: BulkActionStatus, $cursor: String, $limit: Int) {\n    partitionBackfillsOrError(status: $status, cursor: $cursor, limit: $limit) {\n      ... on PartitionBackfills {\n        results {\n          id\n          status\n          isValidSerialization\n          numPartitions\n          timestamp\n          partitionSetName\n          partitionSet {\n            id\n            name\n            mode\n            pipelineName\n            repositoryOrigin {\n              id\n              repositoryName\n              repositoryLocationName\n            }\n          }\n          error {\n            ...PythonErrorFragment\n          }\n\n          ...BackfillTableFragment\n        }\n      }\n      ...PythonErrorFragment\n    }\n  }\n\n  ${PYTHON_ERROR_FRAGMENT}\n  ${BACKFILL_TABLE_FRAGMENT}\n`;\n","import {Page} from '@dagster-io/ui-components';\n\nimport {InstanceBackfills} from './InstanceBackfills';\nimport {useTrackPageView} from '../app/analytics';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {OverviewPageHeader} from '../overview/OverviewPageHeader';\n\nexport const InstanceBackfillsRoot = () => {\n  useTrackPageView();\n  useDocumentTitle('Overview | Backfills');\n\n  return (\n    <Page>\n      <OverviewPageHeader tab=\"backfills\" />\n      <InstanceBackfills />\n    </Page>\n  );\n};\n","import {\n  Alert,\n  Box,\n  Colors,\n  Heading,\n  NonIdealState,\n  PageHeader,\n  Spinner,\n  Tab,\n  Tabs,\n} from '@dagster-io/ui-components';\nimport {useContext} from 'react';\nimport {Link, useParams} from 'react-router-dom';\n\nimport {BackfillActionsMenu} from './BackfillActionsMenu';\nimport {BackfillAssetPartitionsTable} from './BackfillAssetPartitionsTable';\nimport {BackfillLogsTab} from './BackfillLogsTab';\nimport {BackfillOverviewDetails} from './BackfillOverviewDetails';\nimport {BackfillRunsTab} from './BackfillRunsTab';\nimport {useBackfillDetailsQuery} from './useBackfillDetailsQuery';\nimport {CloudOSSContext} from '../../app/CloudOSSContext';\nimport {PythonErrorInfo} from '../../app/PythonErrorInfo';\nimport {QueryRefreshCountdown, useQueryRefreshAtInterval} from '../../app/QueryRefresh';\nimport {useTrackPageView} from '../../app/analytics';\nimport {BulkActionStatus} from '../../graphql/types';\nimport {useDocumentTitle} from '../../hooks/useDocumentTitle';\nimport {useQueryPersistedState} from '../../hooks/useQueryPersistedState';\nimport {\n  DaemonNotRunningAlert,\n  useIsBackfillDaemonHealthy,\n} from '../../partitions/BackfillMessaging';\nimport {testId} from '../../testing/testId';\n\nexport const BackfillPage = () => {\n  const {featureContext} = useContext(CloudOSSContext);\n  const {backfillId} = useParams<{backfillId: string}>();\n  useTrackPageView();\n  useDocumentTitle(`Backfill | ${backfillId}`);\n\n  const [selectedTab, setSelectedTab] = useQueryPersistedState<'partitions' | 'logs' | 'runs'>({\n    queryKey: 'tab',\n    defaults: {tab: 'partitions'},\n  });\n\n  const queryResult = useBackfillDetailsQuery(backfillId);\n  const isDaemonHealthy = useIsBackfillDaemonHealthy();\n  const {data, error} = queryResult;\n\n  const backfill =\n    data?.partitionBackfillOrError.__typename === 'PartitionBackfill'\n      ? data.partitionBackfillOrError\n      : null;\n\n  // for asset backfills, all of the requested runs have concluded in order for the status to be BulkActionStatus.COMPLETED\n  const isInProgress = backfill\n    ? [BulkActionStatus.REQUESTED, BulkActionStatus.CANCELING].includes(backfill.status)\n    : true;\n\n  const refreshState = useQueryRefreshAtInterval(queryResult, 10000, isInProgress);\n\n  function content() {\n    if (!data || !data.partitionBackfillOrError) {\n      return (\n        <Box padding={64} data-testid={testId('page-loading-indicator')}>\n          <Spinner purpose=\"page\" />\n        </Box>\n      );\n    }\n    if (data.partitionBackfillOrError.__typename === 'PythonError') {\n      return <PythonErrorInfo error={data.partitionBackfillOrError} />;\n    }\n    if (data.partitionBackfillOrError.__typename === 'BackfillNotFoundError') {\n      return <NonIdealState icon=\"no-results\" title={data.partitionBackfillOrError.message} />;\n    }\n\n    const backfill = data.partitionBackfillOrError;\n\n    return (\n      <>\n        <BackfillOverviewDetails backfill={backfill} />\n\n        {isDaemonHealthy ? null : (\n          <Box padding={{horizontal: 24, bottom: 16}}>\n            <DaemonNotRunningAlert />\n          </Box>\n        )}\n\n        <Box padding={{left: 24}} border=\"bottom\">\n          <Tabs size=\"large\" selectedTabId={selectedTab}>\n            <Tab id=\"partitions\" title=\"Partitions\" onClick={() => setSelectedTab('partitions')} />\n            <Tab id=\"runs\" title=\"Runs\" onClick={() => setSelectedTab('runs')} />\n            {featureContext.canSeeBackfillCoordinatorLogs ? (\n              <Tab id=\"logs\" title=\"Coordinator logs\" onClick={() => setSelectedTab('logs')} />\n            ) : null}\n          </Tabs>\n        </Box>\n\n        {error?.graphQLErrors && (\n          <Alert intent=\"error\" title={error.graphQLErrors.map((err) => err.message)} />\n        )}\n        <Box flex={{direction: 'column'}} style={{flex: 1, position: 'relative', minHeight: 0}}>\n          {selectedTab === 'partitions' && <BackfillAssetPartitionsTable backfill={backfill} />}\n          {selectedTab === 'runs' && <BackfillRunsTab backfill={backfill} view=\"both\" />}\n          {selectedTab === 'logs' && <BackfillLogsTab backfill={backfill} />}\n        </Box>\n      </>\n    );\n  }\n\n  return (\n    <Box flex={{direction: 'column'}} style={{height: '100%', overflow: 'hidden'}}>\n      <PageHeader\n        title={\n          <Heading>\n            <Link to=\"/overview/backfills\" style={{color: Colors.textLight()}}>\n              Backfills\n            </Link>\n            {' / '}\n            {backfillId}\n          </Heading>\n        }\n        right={\n          <Box flex={{gap: 12, alignItems: 'center'}}>\n            {isInProgress ? <QueryRefreshCountdown refreshState={refreshState} /> : null}\n            {backfill ? (\n              <BackfillActionsMenu\n                backfill={backfill}\n                refetch={queryResult.refetch}\n                canCancelRuns={backfill.status === BulkActionStatus.REQUESTED}\n              />\n            ) : null}\n          </Box>\n        }\n      />\n      {content()}\n    </Box>\n  );\n};\n","import {Redirect, Switch} from 'react-router-dom';\n\nimport {OverviewActivityRoot} from './OverviewActivityRoot';\nimport {OverviewJobsRoot} from './OverviewJobsRoot';\nimport {OverviewResourcesRoot} from './OverviewResourcesRoot';\nimport {OverviewSchedulesRoot} from './OverviewSchedulesRoot';\nimport {OverviewSensorsRoot} from './OverviewSensorsRoot';\nimport {useFeatureFlags} from '../app/Flags';\nimport {Route} from '../app/Route';\nimport {useAutoMaterializeSensorFlag} from '../assets/AutoMaterializeSensorFlag';\nimport {AutomaterializationRoot} from '../assets/auto-materialization/AutomaterializationRoot';\nimport {InstanceBackfillsRoot} from '../instance/InstanceBackfillsRoot';\nimport {BackfillPage} from '../instance/backfill/BackfillPage';\n\nexport const OverviewRoot = () => {\n  const {flagSettingsPage} = useFeatureFlags();\n  const automaterializeSensorsFlagState = useAutoMaterializeSensorFlag();\n  return (\n    <Switch>\n      <Route path=\"/overview/activity\" isNestingRoute>\n        <OverviewActivityRoot />\n      </Route>\n      <Route\n        path=\"/overview/jobs\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/jobs\" /> : <OverviewJobsRoot />)}\n      />\n      <Route\n        path=\"/overview/schedules\"\n        render={() =>\n          flagSettingsPage ? <Redirect to=\"/automation\" /> : <OverviewSchedulesRoot />\n        }\n      />\n      <Route\n        path=\"/overview/sensors\"\n        render={() => (flagSettingsPage ? <Redirect to=\"/automation\" /> : <OverviewSensorsRoot />)}\n      />\n      <Route\n        path=\"/overview/automation\"\n        render={() =>\n          flagSettingsPage && automaterializeSensorsFlagState !== 'has-global-amp' ? (\n            <Redirect to=\"/automation\" />\n          ) : (\n            <AutomaterializationRoot />\n          )\n        }\n      />\n      <Route path=\"/overview/backfills/:backfillId\" render={() => <BackfillPage />} />\n      <Route path=\"/overview/backfills\" exact render={() => <InstanceBackfillsRoot />} />\n      <Route path=\"/overview/resources\">\n        <OverviewResourcesRoot />\n      </Route>\n      <Route path=\"*\" isNestingRoute render={() => <Redirect to=\"/overview/activity\" />} />\n    </Switch>\n  );\n};\n\n// Imported via React.lazy, which requires a default export.\n// eslint-disable-next-line import/no-default-export\nexport default OverviewRoot;\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\ninterface Bucket {\n  repoAddress: RepoAddress;\n}\n\nexport const sortRepoBuckets = <B extends Bucket>(buckets: B[]) => {\n  return [...buckets].sort((a, b) => {\n    const aString = repoAddressAsHumanString(a.repoAddress);\n    const bString = repoAddressAsHumanString(b.repoAddress);\n    return aString.localeCompare(bString);\n  });\n};\n","import {DagsterRepoOption} from '../workspace/WorkspaceContext/util';\nimport {buildRepoAddress} from '../workspace/buildRepoAddress';\nimport {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\n\nexport const visibleRepoKeys = (visibleRepos: DagsterRepoOption[]) => {\n  return new Set(\n    visibleRepos.map((option) =>\n      repoAddressAsHumanString(\n        buildRepoAddress(option.repository.name, option.repositoryLocation.name),\n      ),\n    ),\n  );\n};\n","import {Colors, JoinedButtons, TokenizingFieldValue} from '@dagster-io/ui-components';\nimport isEqual from 'lodash/isEqual';\nimport {useMemo} from 'react';\nimport {useLocation} from 'react-router-dom';\nimport styled, {css} from 'styled-components';\n\nimport {failedStatuses, inProgressStatuses, queuedStatuses} from './RunStatuses';\nimport {runsPathWithFilters, useQueryPersistedRunFilters} from './RunsFilterInput';\nimport {RunTabsCountQuery, RunTabsCountQueryVariables} from './types/RunListTabs.types';\nimport {gql, useQuery} from '../apollo-client';\nimport {RunStatus, RunsFilter} from '../graphql/types';\nimport {useDocumentTitle} from '../hooks/useDocumentTitle';\nimport {AnchorButton} from '../ui/AnchorButton';\n\nconst getDocumentTitle = (selected: ReturnType<typeof useSelectedRunsTab>) => {\n  switch (selected) {\n    case 'all':\n      return 'Runs | All runs';\n    case 'failed':\n      return 'Runs | Failed';\n    case 'in-progress':\n      return 'Runs | In progress';\n    case 'queued':\n      return 'Runs | Queued';\n    case 'scheduled':\n      return 'Runs | Scheduled';\n    default:\n      return 'Runs';\n  }\n};\n\nexport const useRunListTabs = (filter: RunsFilter = {}) => {\n  const queryResult = useQuery<RunTabsCountQuery, RunTabsCountQueryVariables>(\n    RUN_TABS_COUNT_QUERY,\n    {\n      variables: {\n        queuedFilter: {...filter, statuses: Array.from(queuedStatuses)},\n        inProgressFilter: {...filter, statuses: Array.from(inProgressStatuses)},\n      },\n    },\n  );\n\n  const {data: countData} = queryResult;\n  const {queuedCount, inProgressCount} = useMemo(() => {\n    return {\n      queuedCount:\n        countData?.queuedCount?.__typename === 'Runs' ? countData.queuedCount.count : null,\n      inProgressCount:\n        countData?.inProgressCount?.__typename === 'Runs' ? countData.inProgressCount.count : null,\n    };\n  }, [countData]);\n\n  const [filterTokens] = useQueryPersistedRunFilters();\n  const selectedTab = useSelectedRunsTab(filterTokens);\n\n  useDocumentTitle(getDocumentTitle(selectedTab));\n\n  const urlForStatus = (statuses: RunStatus[]) => {\n    const tokensMinusStatus = filterTokens.filter((token) => token.token !== 'status');\n    const statusTokens = statuses.map((status) => ({token: 'status' as const, value: status}));\n    return runsPathWithFilters([...statusTokens, ...tokensMinusStatus]);\n  };\n\n  const tabs = (\n    <JoinedButtons>\n      <ActivatableButton to={urlForStatus([])} id=\"all\" $active={selectedTab === 'all'}>\n        All runs\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(queuedStatuses))}\n        id=\"queued\"\n        $active={selectedTab === 'queued'}\n      >\n        Queued ({queuedCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(inProgressStatuses))}\n        id=\"in-progress\"\n        $active={selectedTab === 'in-progress'}\n      >\n        In progress ({inProgressCount ?? 'indeterminate'})\n      </ActivatableButton>\n      <ActivatableButton\n        to={urlForStatus(Array.from(failedStatuses))}\n        id=\"failed\"\n        $active={selectedTab === 'failed'}\n      >\n        Failed\n      </ActivatableButton>\n      <ActivatableButton\n        title=\"Scheduled\"\n        to=\"/runs/scheduled\"\n        id=\"scheduled\"\n        $active={selectedTab === 'scheduled'}\n      >\n        Scheduled\n      </ActivatableButton>\n    </JoinedButtons>\n  );\n\n  return {tabs, queryResult};\n};\n\nexport const ActivatableButton = styled(AnchorButton)<{$active: boolean}>`\n  color: ${Colors.textLight()};\n\n  &&:hover {\n    color: ${Colors.textLight()};\n  }\n\n  ${({$active}) =>\n    $active\n      ? css`\n          background-color: ${Colors.backgroundLighterHover()};\n          color: ${Colors.textDefault()};\n\n          &&:hover {\n            background-color: ${Colors.backgroundLighterHover()};\n            color: ${Colors.textDefault()};\n          }\n        `\n      : css`\n          background-color: ${Colors.backgroundDefault()};\n        `}\n`;\n\nexport const useSelectedRunsTab = (filterTokens: TokenizingFieldValue[]) => {\n  const {pathname} = useLocation();\n  if (pathname === '/runs/timeline') {\n    return 'timeline';\n  }\n  if (pathname === '/runs/scheduled') {\n    return 'scheduled';\n  }\n  if (pathname === '/overview/backfills') {\n    return 'backfills';\n  }\n\n  const statusTokens = new Set(\n    filterTokens.filter((token) => token.token === 'status').map((token) => token.value),\n  );\n  if (isEqual(queuedStatuses, statusTokens)) {\n    return 'queued';\n  }\n  if (isEqual(inProgressStatuses, statusTokens)) {\n    return 'in-progress';\n  }\n  if (isEqual(failedStatuses, statusTokens)) {\n    return 'failed';\n  }\n  return 'all';\n};\n\nexport const RUN_TABS_COUNT_QUERY = gql`\n  query RunTabsCountQuery($queuedFilter: RunsFilter!, $inProgressFilter: RunsFilter!) {\n    queuedCount: pipelineRunsOrError(filter: $queuedFilter) {\n      ... on Runs {\n        count\n      }\n    }\n    inProgressCount: pipelineRunsOrError(filter: $inProgressFilter) {\n      ... on Runs {\n        count\n      }\n    }\n  }\n`;\n"],"names":["OverviewJobsTable","repos","param","parentRef","useRef","allKeys","useMemo","map","repoAddress","repoAddressAsHumanString","expandedKeys","onToggle","onToggleAll","useRepoExpansionState","OVERVIEW_COLLAPSED_KEY","flattened","flat","forEach","jobs","push","type","jobCount","length","repoKey","includes","isJob","name","duplicateRepoNames","findDuplicateRepoNames","rowVirtualizer","useVirtualizer","count","getScrollElement","current","estimateSize","row","ii","TABLE_HEADER_HEIGHT","overscan","totalHeight","getTotalSize","items","getVirtualItems","jsx_runtime","jsx","div","style","overflow","jsxs","Container","ref","VirtualizedJobHeader","Inner","$totalHeight","index","key","size","start","RepoRow","height","expanded","showLocation","has","rightElement","Tooltip","content","concat","placement","Tag","VirtualizedJobRow","JobsPageContent","allRepos","visibleRepos","loading","workspaceLoading","data","cachedData","useContext","WorkspaceContext","searchValue","setSearchValue","useQueryPersistedState","queryKey","defaults","search","repoCount","queryResultOverview","useQuery","OVERVIEW_JOBS_QUERY","fetchPolicy","notifyOnNetworkStatusChange","queryLoading","refreshState","useQueryRefreshAtInterval","FIFTEEN_SECONDS","repoBuckets","cachedEntries","Object","values","filter","location","__typename","workspaceOrError","entries","locationEntries","visibleKeys","visibleRepoKeys","buildBuckets","useBlockTraceUntilTrue","sanitizedSearch","trim","toLocaleLowerCase","anySearch","filteredBySearch","searchToLower","showSearchSpinner","Fragment","Box","padding","horizontal","vertical","flex","direction","alignItems","justifyContent","grow","gap","RepoFilterButton","TextInput","icon","value","SearchInputSpinner","tooltipContent","undefined","onChange","e","target","placeholder","width","QueryRefreshCountdown","SpinnerWithText","label","paddingTop","Spinner","purpose","color","Colors","anyReposHidden","top","NonIdealState","title","description","strong","entry","locationOrLoadError","buckets","repo","repositories","pipelines","buildRepoAddress","isHiddenAssetGroupJob","pipeline","sortRepoBuckets","gql","PYTHON_ERROR_FRAGMENT","OverviewAssetsRoot","Header","TabButton","useTrackPageView","useDocumentTitle","assets","query","error","useAllAssets","useRefreshAtInterval","refresh","intervalMs","leading","groupedAssetsUnfiltered","React","groupAssets","groups","asset","definition","groupName","repositoryName","repository","decode","qs","searchQuery","JSON","parse","encode","stringify","groupedAssets","group","UNGROUPED_ASSETS","toLowerCase","orderedAssets","flatMap","useAssetsBaseData","position","zIndex","selected","border","Alert","intent","Link","to","PythonErrorInfo","VirtualHeaderRow","VirtualRow","TEMPLATE_COLUMNS","HeaderRow","templateColumns","sticky","HeaderCell","assetKeys","path","liveDataByNode","statuses","groupAssetsByStatus","find","containerProps","viewport","useViewport","isBatchStillLoading","keys","zeroOrBlank","Row","$height","$start","RowGrid","Cell","Icon","fontWeight","workspacePathFromAddress","RepositoryLinkWrapper","maxWidth","RepositoryLink","showRefresh","missing","SelectOnHover","getCount","status","case","StatusCase","PARTITIONS_MISSING","numMissing","adjective","borderRadius","failed","PARTITIONS_FAILED","numFailed","borderLeft","borderRight","borderBottom","display","inprogress","MATERIALIZING","numMaterializing","successful","PARTITIONS_MATERIALIZED","numMaterialized","backgroundColor","styled","children","RowCell","withConfig","SelectWrapper","Select","itemPredicate","item","displayNameForAssetKey","itemRenderer","LinkWithNoUnderline","assetDetailsPathForKey","MenuItem","text","paddingLeft","whiteSpace","textOverflow","Caption","partitionCountString","onItemSelect","OverviewPageAlerts","OverviewTabs","tab","props","flagSettingsPage","useFeatureFlags","automaterialize","useAutomaterializeDaemonStatus","automaterializeSensorsFlagState","useAutoMaterializeSensorFlag","enableAssetHealthOverviewPreview","AssetFeatureContext","Tabs","selectedTabId","TabLink","id","paused","alignSelf","OverviewPageHeader","queryData","rest","PageHeader","tabs","OverviewActivityRoot","header","_defaultTab","setDefaultTab","useStateWithStorage","json","defaultTab","tabButton","JoinedButtons","ActivatableButton","$active","Switch","Route","OverviewTimelineRoot","isNestingRoute","render","Redirect","OverviewJobsRoot","Heading","OverviewResourcesTable","resources","resourceCount","resource","VirtualizedResourceHeader","VirtualizedResourceRow","OverviewResourcesRoot","OVERVIEW_RESOURCES_QUERY","allTopLevelResourceDetails","RESOURCE_ENTRY_FRAGMENT","OverviewScheduleTable","headerCheckbox","checkedKeys","onToggleCheckFactory","schedules","scheduleCount","schedule","VirtualizedScheduleHeader","checkbox","scheduleKey","makeScheduleKey","VirtualizedScheduleRow","scheduleState","showCheckboxColumn","checked","onToggleChecked","OverviewSchedules","codeLocationFilter","useCodeLocationFilter","runningStateFilter","useInstigationStatusFilter","filters","button","filterButton","activeFiltersJsx","useFilters","OVERVIEW_SCHEDULES_QUERY","state","runningState","filteredBuckets","anySchedulesVisible","some","allPermissionedSchedules","filterPermissionedInstigationState","scheduleName","allPermissionedScheduleKeys","checkedIds","onToggleFactory","useSelectionReducer","permissionedKeysOnScreen","filteredKeys","Set","checkedSchedules","checkedKeysOnScreen","viewerHasAnyInstigationPermission","checkedCount","canShow","useDisabledButtonTooltipFix","ScheduleBulkActionMenu","onDone","refetch","SchedulerInfo","daemonHealth","instance","CheckAllBox","totalCount","scheduleNames","BASIC_INSTIGATION_STATE_FRAGMENT","INSTANCE_HEALTH_FRAGMENT","OverviewSchedulesRoot","OverviewSensorTable","sensors","sensorCount","sensor","VirtualizedSensorHeader","sensorKey","makeSensorKey","VirtualizedSensorRow","sensorState","toSetFilterValue","SENSOR_TYPE_META","match","SENSOR_TYPE_TO_FILTER","SensorType","ASSET","AUTO_MATERIALIZE","AUTOMATION","FRESHNESS_POLICY","MULTI_ASSET","RUN_STATUS","STANDARD","ALL_SENSOR_TYPE_FILTERS","OverviewSensors","sensorTypes","setSensorTypes","sensorType","vals","Array","from","join","split","sensorTypeFilter","useStaticSetFilter","allValues","getStringValue","renderLabel","span","onStateChanged","OVERVIEW_SENSORS_QUERY","anySensorsVisible","allPermissionedSensors","sensorName","allPermissionedSensorKeys","checkedSensors","SensorBulkActionMenu","SensorInfo","OverviewSensorsRoot","InstanceAutomaterializationEvaluationHistoryTable","queryResult","setSelectedTick","setTableView","setTimerange","setParentStatuses","tickStatus","setTickStatus","AutomaterializationTickStatusDisplay","ALL","AutomaterializationTickStatusDisplayMappings","paginationProps","useCursorPaginatedQuery","ASSET_DAEMON_TICKS_QUERY","variables","nextCursorForResult","ticks","autoMaterializeTicks","PAGE_SIZE","getResultArray","pageSize","hasPrevCursor","useEffect","timestamp","end","endTimestamp","AutomaterializationEvaluationHistoryTable","GlobalAutomaterializationContent","confirm","useConfirmation","permissions","canToggleAutoMaterialize","useUnscopedPermissions","isPaused","setIsPaused","useState","setStatuses","timeRange","getVariables","useCallback","now","Date","afterTimestamp","beforeTimestamp","TWENTY_MINUTES","fetch","useLazyQuery","enabled","selectedTick","tableView","view","raw","cursor","previousData","allTicks","tick","nextTick","isStuckStartedTick","copy","InstigationTickStatus","FAILURE","onHoverTick","DeclarativeAutomationBanner","Table","tbody","tr","td","Checkbox","format","disabled","setPaused","Subtitle2","LiveTickTimeline","onSelectTick","exactRange","tickGrid","timeAfter","AutomaterializationTickDetailDialog","isOpen","close","AutomaterializeRunHistoryTable","AutomaterializationRoot","GlobalAutomaterializationRoot","assertUnreachable","Page","labelForBackfillStatus","BulkActionStatus","CANCELED","CANCELING","COMPLETED","FAILED","REQUESTED","COMPLETED_SUCCESS","COMPLETED_FAILED","backfillStatusValues","InstanceBackfills","statusState","setStatusState","statusFilter","allowMultipleSelections","closeOnSelect","BACKFILLS_QUERY","result","partitionBackfillsOrError","results","isDaemonHealthy","useIsBackfillDaemonHealthy","bottom","DaemonNotRunningAlert","BackfillTable","backfills","slice","margin","CursorPaginationControls","BACKFILL_TABLE_FRAGMENT","InstanceBackfillsRoot","BackfillPage","featureContext","CloudOSSContext","backfillId","useParams","selectedTab","setSelectedTab","useBackfillDetailsQuery","backfill","partitionBackfillOrError","isInProgress","right","BackfillActionsMenu","canCancelRuns","data-testid","testId","message","BackfillOverviewDetails","left","Tab","onClick","canSeeBackfillCoordinatorLogs","graphQLErrors","err","minHeight","BackfillAssetPartitionsTable","BackfillRunsTab","BackfillLogsTab","OverviewRoot","exact","overview_OverviewRoot","sort","a","b","aString","bString","localeCompare","option","repositoryLocation","getDocumentTitle","useRunListTabs","RUN_TABS_COUNT_QUERY","queuedFilter","queuedStatuses","inProgressFilter","inProgressStatuses","countData","queuedCount","inProgressCount","filterTokens","useQueryPersistedRunFilters","useSelectedRunsTab","urlForStatus","tokensMinusStatus","token","statusTokens","runsPathWithFilters","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__","failedStatuses","AnchorButton","css","pathname","useLocation","isEqual"],"sourceRoot":""}