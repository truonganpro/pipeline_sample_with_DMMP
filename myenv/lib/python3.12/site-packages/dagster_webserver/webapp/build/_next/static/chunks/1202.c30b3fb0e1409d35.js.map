{"version":3,"file":"static/chunks/1202.c30b3fb0e1409d35.js","mappings":"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","sources":["webpack://_N_E/../ui-core/src/schedules/ScheduleStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/schedules/ScheduleBulkActionMenu.tsx","webpack://_N_E/../ui-core/src/schedules/SchedulerInfo.tsx","webpack://_N_E/../ui-core/src/schedules/makeScheduleKey.tsx","webpack://_N_E/../ui-core/src/sensors/SensorStateChangeDialog.tsx","webpack://_N_E/../ui-core/src/sensors/SensorBulkActionMenu.tsx","webpack://_N_E/../ui-components/src/components/useDelayedState.tsx","webpack://_N_E/../ui-core/src/ui/SearchInputSpinner.tsx","webpack://_N_E/../ui-core/src/instance/JobMenu.tsx","webpack://_N_E/../ui-core/src/workspace/VirtualizedJobRow.tsx"],"sourcesContent":["// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SCHEDULE_MUTATION, STOP_SCHEDULE_MUTATION} from './ScheduleMutations';\nimport {\n  StartThisScheduleMutation,\n  StartThisScheduleMutationVariables,\n  StopScheduleMutation,\n  StopScheduleMutationVariables,\n} from './types/ScheduleMutations.types';\nimport {useMutation} from '../apollo-client';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type ScheduleInfo = {\n  repoAddress: RepoAddress;\n  scheduleName: string;\n  scheduleState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  schedules: ScheduleInfo[];\n}\n\nexport const ScheduleStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, schedules} = props;\n  const count = schedules.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSchedule] = useMutation<\n    StartThisScheduleMutation,\n    StartThisScheduleMutationVariables\n  >(START_SCHEDULE_MUTATION);\n\n  const [stopSchedule] = useMutation<StopScheduleMutation, StopScheduleMutationVariables>(\n    STOP_SCHEDULE_MUTATION,\n  );\n\n  const start = async (schedule: ScheduleInfo) => {\n    const {repoAddress, scheduleName} = schedule;\n    const variables = {\n      scheduleSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        scheduleName,\n      },\n    };\n\n    const {data} = await startSchedule({variables});\n\n    switch (data?.startSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.startSchedule.message,\n        });\n    }\n  };\n\n  const stop = async (schedule: ScheduleInfo) => {\n    const {scheduleName, scheduleState} = schedule;\n    const variables = {\n      id: scheduleState.id,\n    };\n\n    const {data} = await stopSchedule({variables});\n\n    switch (data?.stopRunningSchedule.__typename) {\n      case 'ScheduleStateResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: scheduleName,\n          error: data.stopRunningSchedule.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const schedule of schedules) {\n      if (openWithIntent === 'start') {\n        await start(schedule);\n      } else {\n        await stop(schedule);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'schedule' : 'schedules'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'schedule' : 'schedules'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Schedules are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 schedule' : `${count} schedules`}`\n            : `Stopping ${count === 1 ? '1 schedule' : `${count} schedules`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>\n          Please do not close the window or navigate away while schedules are being updated.\n        </div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 schedule' : `${successCount} schedules`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`\n                  : `Could not stop ${\n                      errorCount === 1 ? '1 schedule' : `${errorCount} schedules`\n                    }.`}\n              </div>\n            </Group>\n            <ul>\n              {Object.keys(errors).map((scheduleName) => (\n                <li key={scheduleName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{scheduleName}:</strong>\n                    {errors[scheduleName] ? <div>{errors[scheduleName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start schedules' : 'Stop schedules'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {ScheduleInfo, ScheduleStateChangeDialog} from './ScheduleStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  schedules: ScheduleInfo[];\n  onDone: () => void;\n}\n\nexport const ScheduleBulkActionMenu = (props: Props) => {\n  const {schedules, onDone} = props;\n  const count = schedules.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(schedules.map(({scheduleState}) => scheduleState));\n  }, [schedules]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 schedule' : `${count} schedules`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <ScheduleStateChangeDialog\n        openWithIntent={openWithIntent}\n        schedules={schedules}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {Alert, Box} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\nimport {DaemonHealthFragment} from '../instance/types/DaemonList.types';\n\ntype Props = React.ComponentPropsWithRef<typeof Box> & {\n  daemonHealth: DaemonHealthFragment | undefined;\n};\n\nexport const SchedulerInfo = ({daemonHealth, ...boxProps}: Props) => {\n  let healthy = undefined;\n\n  if (daemonHealth) {\n    const schedulerHealths = daemonHealth.allDaemonStatuses.filter(\n      (daemon) => daemon.daemonType === 'SCHEDULER',\n    );\n    if (schedulerHealths.length > 0) {\n      const schedulerHealth = schedulerHealths[0]!;\n      healthy = schedulerHealth.required && schedulerHealth.healthy;\n    }\n  }\n\n  if (healthy === false) {\n    return (\n      <Box {...boxProps}>\n        <Alert\n          intent=\"warning\"\n          title=\"The scheduler daemon is not running.\"\n          description={\n            <div>\n              See the{' '}\n              <a href=\"https://docs.dagster.io/deployment/dagster-daemon\">\n                dagster-daemon documentation\n              </a>{' '}\n              for more information on how to deploy the dagster-daemon process.\n            </div>\n          }\n        />\n      </Box>\n    );\n  }\n\n  return null;\n};\n","import {repoAddressAsHumanString} from '../workspace/repoAddressAsString';\nimport {RepoAddress} from '../workspace/types';\n\nexport const makeScheduleKey = (repoAddress: RepoAddress, scheduleName: string) => {\n  return `${repoAddressAsHumanString(repoAddress)}-${scheduleName}`;\n};\n","// eslint-disable-next-line no-restricted-imports\nimport {ProgressBar} from '@blueprintjs/core';\nimport {\n  Button,\n  Colors,\n  Dialog,\n  DialogBody,\n  DialogFooter,\n  Group,\n  Icon,\n} from '@dagster-io/ui-components';\nimport {useEffect} from 'react';\n\nimport {START_SENSOR_MUTATION, STOP_SENSOR_MUTATION} from './SensorMutations';\nimport {\n  StartSensorMutation,\n  StartSensorMutationVariables,\n  StopRunningSensorMutation,\n  StopRunningSensorMutationVariables,\n} from './types/SensorMutations.types';\nimport {useMutation} from '../apollo-client';\nimport {\n  OpenWithIntent,\n  useInstigationStateReducer,\n} from '../instigation/useInstigationStateReducer';\nimport {BasicInstigationStateFragment} from '../overview/types/BasicInstigationStateFragment.types';\nimport {NavigationBlock} from '../runs/NavigationBlock';\nimport {RepoAddress} from '../workspace/types';\n\nexport type SensorInfo = {\n  repoAddress: RepoAddress;\n  sensorName: string;\n  sensorState: BasicInstigationStateFragment;\n};\n\nexport interface Props {\n  openWithIntent: OpenWithIntent;\n  onClose: () => void;\n  onComplete: () => void;\n  sensors: SensorInfo[];\n}\n\nexport const SensorStateChangeDialog = (props: Props) => {\n  const {openWithIntent, onClose, onComplete, sensors} = props;\n  const count = sensors.length;\n\n  const [state, dispatch] = useInstigationStateReducer();\n\n  // If the dialog is newly closed, reset state.\n  useEffect(() => {\n    if (openWithIntent === 'not-open') {\n      dispatch({type: 'reset'});\n    }\n  }, [openWithIntent, dispatch]);\n\n  const [startSensor] = useMutation<StartSensorMutation, StartSensorMutationVariables>(\n    START_SENSOR_MUTATION,\n  );\n\n  const [stopSensor] = useMutation<StopRunningSensorMutation, StopRunningSensorMutationVariables>(\n    STOP_SENSOR_MUTATION,\n  );\n\n  const start = async (sensor: SensorInfo) => {\n    const {repoAddress, sensorName} = sensor;\n    const variables = {\n      sensorSelector: {\n        repositoryLocationName: repoAddress.location,\n        repositoryName: repoAddress.name,\n        sensorName,\n      },\n    };\n\n    const {data} = await startSensor({variables});\n\n    switch (data?.startSensor.__typename) {\n      case 'Sensor':\n        dispatch({type: 'update-success'});\n        return;\n      case 'SensorNotFoundError':\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.startSensor.message,\n        });\n    }\n  };\n\n  const stop = async (sensor: SensorInfo) => {\n    const {sensorName, sensorState} = sensor;\n    const variables = {\n      id: sensorState.id,\n    };\n\n    const {data} = await stopSensor({variables});\n\n    switch (data?.stopSensor.__typename) {\n      case 'StopSensorMutationResult':\n        dispatch({type: 'update-success'});\n        return;\n      case 'UnauthorizedError':\n      case 'PythonError':\n        dispatch({\n          type: 'update-error',\n          name: sensorName,\n          error: data.stopSensor.message,\n        });\n    }\n  };\n\n  const mutate = async () => {\n    if (openWithIntent === 'not-open') {\n      return;\n    }\n\n    dispatch({type: 'start'});\n    for (const sensor of sensors) {\n      if (openWithIntent === 'start') {\n        await start(sensor);\n      } else {\n        await stop(sensor);\n      }\n    }\n\n    dispatch({type: 'complete'});\n    onComplete();\n  };\n\n  const progressContent = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial':\n        if (openWithIntent === 'stop') {\n          return (\n            <div>\n              {`${count} ${\n                count === 1 ? 'sensor' : 'sensors'\n              } will be stopped. Do you want to continue?`}\n            </div>\n          );\n        }\n        return (\n          <div>\n            {`${count} ${\n              count === 1 ? 'sensor' : 'sensors'\n            } will be started. Do you want to continue?`}\n          </div>\n        );\n      case 'updating':\n      case 'completed':\n        const value = count > 0 ? state.completion.completed / count : 1;\n        return (\n          <Group direction=\"column\" spacing={8}>\n            <ProgressBar intent=\"primary\" value={Math.max(0.1, value)} animate={value < 1} />\n            {state.step === 'updating' ? (\n              <NavigationBlock message=\"Sensors are being updated, please do not navigate away yet.\" />\n            ) : null}\n          </Group>\n        );\n      default:\n        return null;\n    }\n  };\n\n  const buttons = () => {\n    if (openWithIntent === 'not-open') {\n      return null;\n    }\n\n    switch (state.step) {\n      case 'initial': {\n        const label =\n          openWithIntent === 'start'\n            ? `Start ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <>\n            <Button intent=\"none\" onClick={onClose}>\n              Cancel\n            </Button>\n            <Button intent=\"primary\" onClick={mutate}>\n              {label}\n            </Button>\n          </>\n        );\n      }\n      case 'updating': {\n        const label =\n          openWithIntent === 'start'\n            ? `Starting ${count === 1 ? '1 sensor' : `${count} sensors`}`\n            : `Stopping ${count === 1 ? '1 sensor' : `${count} sensors`}`;\n        return (\n          <Button intent=\"primary\" disabled>\n            {label}\n          </Button>\n        );\n      }\n      case 'completed':\n        return (\n          <Button intent=\"primary\" onClick={onClose}>\n            Done\n          </Button>\n        );\n    }\n  };\n\n  const completionContent = () => {\n    if (openWithIntent === 'not-open' || state.step === 'initial') {\n      return null;\n    }\n\n    if (state.step === 'updating') {\n      return (\n        <div>Please do not close the window or navigate away while sensors are being updated.</div>\n      );\n    }\n\n    const errors = state.completion.errors;\n    const errorCount = Object.keys(errors).length;\n    const successCount = state.completion.completed - errorCount;\n\n    return (\n      <Group direction=\"column\" spacing={8}>\n        {successCount ? (\n          <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n            <Icon name=\"check_circle\" color={Colors.accentGreen()} />\n            <div>\n              {openWithIntent === 'start'\n                ? `Successfully started ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`\n                : `Successfully stopped ${\n                    successCount === 1 ? '1 sensor' : `${successCount} sensors`\n                  }.`}\n            </div>\n          </Group>\n        ) : null}\n        {errorCount ? (\n          <Group direction=\"column\" spacing={8}>\n            <Group direction=\"row\" spacing={8} alignItems=\"flex-start\">\n              <Icon name=\"warning\" color={Colors.accentYellow()} />\n              <div>\n                {openWithIntent === 'start'\n                  ? `Could not start ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`\n                  : `Could not stop ${errorCount === 1 ? '1 sensor' : `${errorCount} sensors`}:`}\n              </div>\n            </Group>\n            <ul style={{margin: '8px 0'}}>\n              {Object.keys(errors).map((sensorName) => (\n                <li key={sensorName}>\n                  <Group direction=\"row\" spacing={8}>\n                    <strong>{sensorName}:</strong>\n                    {errors[sensorName] ? <div>{errors[sensorName]}</div> : null}\n                  </Group>\n                </li>\n              ))}\n            </ul>\n          </Group>\n        ) : null}\n      </Group>\n    );\n  };\n\n  const canQuicklyClose = state.step !== 'updating';\n\n  return (\n    <Dialog\n      isOpen={openWithIntent !== 'not-open'}\n      title={openWithIntent === 'start' ? 'Start sensors' : 'Stop sensors'}\n      canEscapeKeyClose={canQuicklyClose}\n      canOutsideClickClose={canQuicklyClose}\n      onClose={onClose}\n    >\n      <DialogBody>\n        <Group direction=\"column\" spacing={24}>\n          {progressContent()}\n          {completionContent()}\n        </Group>\n      </DialogBody>\n      <DialogFooter>{buttons()}</DialogFooter>\n    </Dialog>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover} from '@dagster-io/ui-components';\nimport {useMemo, useState} from 'react';\n\nimport {SensorInfo, SensorStateChangeDialog} from './SensorStateChangeDialog';\nimport {instigationStateSummary} from '../instigation/instigationStateSummary';\nimport {OpenWithIntent} from '../instigation/useInstigationStateReducer';\n\ninterface Props {\n  sensors: SensorInfo[];\n  onDone: () => void;\n}\n\nexport const SensorBulkActionMenu = (props: Props) => {\n  const {sensors, onDone} = props;\n  const count = sensors.length;\n\n  const [openWithIntent, setOpenWithIntent] = useState<OpenWithIntent>('not-open');\n\n  const {anyOff, anyOn} = useMemo(() => {\n    return instigationStateSummary(sensors.map(({sensorState}) => sensorState));\n  }, [sensors]);\n\n  return (\n    <>\n      <Popover\n        content={\n          <Menu>\n            <MenuItem\n              text={`Start ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOff}\n              aria-disabled={!anyOff}\n              icon=\"toggle_on\"\n              onClick={() => {\n                setOpenWithIntent('start');\n              }}\n            />\n            <MenuItem\n              text={`Stop ${count === 1 ? '1 sensor' : `${count} sensors`}`}\n              disabled={!anyOn}\n              aria-disabled={!anyOn}\n              icon=\"toggle_off\"\n              onClick={() => {\n                setOpenWithIntent('stop');\n              }}\n            />\n          </Menu>\n        }\n        placement=\"bottom-end\"\n      >\n        <Button disabled={!count} intent=\"primary\" rightIcon={<Icon name=\"expand_more\" />}>\n          Actions\n        </Button>\n      </Popover>\n      <SensorStateChangeDialog\n        openWithIntent={openWithIntent}\n        sensors={sensors}\n        onClose={() => setOpenWithIntent('not-open')}\n        onComplete={() => {\n          onDone();\n        }}\n      />\n    </>\n  );\n};\n","import {useEffect, useState} from 'react';\n\nexport const useDelayedState = (delayMsec: number) => {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(() => setReady(true), delayMsec);\n    return () => clearTimeout(timer);\n  }, [delayMsec]);\n\n  return ready;\n};\n","import {Box, Spinner, Tooltip, useDelayedState} from '@dagster-io/ui-components';\nimport * as React from 'react';\n\ninterface Props {\n  tooltipContent: string | React.ReactElement | null;\n}\n\nconst SPINNER_WAIT_MSEC = 2000;\n\nexport const SearchInputSpinner = (props: Props) => {\n  const {tooltipContent} = props;\n  const canShowSpinner = useDelayedState(SPINNER_WAIT_MSEC);\n\n  if (!canShowSpinner) {\n    return null;\n  }\n\n  return (\n    <Box margin={{top: 1}}>\n      <Tooltip placement=\"top\" canShow={!!tooltipContent} content={tooltipContent || ''}>\n        <Spinner purpose=\"body-text\" />\n      </Tooltip>\n    </Box>\n  );\n};\n","import {Button, Icon, Menu, MenuItem, Popover, Spinner, Tooltip} from '@dagster-io/ui-components';\nimport {useCallback} from 'react';\n\nimport {RunReExecutionQuery, RunReExecutionQueryVariables} from './types/JobMenu.types';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {usePermissionsForLocation} from '../app/Permissions';\nimport {useMaterializationAction} from '../assets/LaunchAssetExecutionButton';\nimport {EXECUTION_PLAN_TO_GRAPH_FRAGMENT} from '../gantt/toGraphQueryItems';\nimport {ReexecutionStrategy} from '../graphql/types';\nimport {canRunAllSteps, canRunFromFailure} from '../runs/RunActionButtons';\nimport {RunTimeFragment} from '../runs/types/RunUtils.types';\nimport {useJobReexecution} from '../runs/useJobReExecution';\nimport {MenuLink} from '../ui/MenuLink';\nimport {RepoAddress} from '../workspace/types';\nimport {workspacePipelinePath} from '../workspace/workspacePath';\n\ninterface Props {\n  job: {isJob: boolean; name: string; runs: RunTimeFragment[]};\n  repoAddress: RepoAddress;\n  isAssetJob: boolean | 'loading';\n}\n\n/**\n * Lazily load more information about the last run for this job, then use that data to inform\n * whether re-execution is possible.\n */\nexport const JobMenu = (props: Props) => {\n  const {job, isAssetJob, repoAddress} = props;\n  const lastRun = job.runs.length ? job.runs[0] : null;\n  const pipelineSelector = {\n    pipelineName: job.name,\n    repositoryName: repoAddress.name,\n    repositoryLocationName: repoAddress.location,\n  };\n\n  const materialize = useMaterializationAction(job.name);\n  const onReexecute = useJobReexecution();\n\n  const {\n    permissions: {canLaunchPipelineReexecution, canLaunchPipelineExecution},\n    disabledReasons,\n  } = usePermissionsForLocation(repoAddress.location);\n\n  const [fetchHasExecutionPlan, queryResult] = useLazyQuery<\n    RunReExecutionQuery,\n    RunReExecutionQueryVariables\n  >(RUN_RE_EXECUTION_QUERY);\n\n  const {data} = queryResult;\n\n  const fetchIfPossible = useCallback(() => {\n    if (lastRun?.id) {\n      fetchHasExecutionPlan({variables: {runId: lastRun.id}});\n    }\n  }, [lastRun, fetchHasExecutionPlan]);\n\n  const run = data?.pipelineRunOrError.__typename === 'Run' ? data?.pipelineRunOrError : null;\n  const executeItem =\n    isAssetJob === 'loading' ? (\n      <MenuItem icon=\"execute\" text=\"Loading...\" disabled={true} />\n    ) : isAssetJob === true ? (\n      <MenuItem\n        icon={materialize.loading ? <Spinner purpose=\"caption-text\" /> : 'execute'}\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        onClick={(e) => materialize.onClick(pipelineSelector, e)}\n      />\n    ) : (\n      <MenuLink\n        icon=\"execute\"\n        text=\"Launch new run\"\n        disabled={!canLaunchPipelineExecution}\n        to={workspacePipelinePath({\n          repoName: repoAddress.name,\n          repoLocation: repoAddress.location,\n          pipelineName: job.name,\n          isJob: job.isJob,\n          path: '/playground',\n        })}\n      />\n    );\n\n  const reExecuteAllItem = (\n    <MenuItem\n      icon=\"replay\"\n      text=\"Re-execute latest run\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.ALL_STEPS) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunAllSteps(run)}\n    />\n  );\n\n  const reExecuteFromFailureItem = (\n    <MenuItem\n      icon=\"sync_problem\"\n      text=\"Re-execute latest run from failure\"\n      onClick={() => (run ? onReexecute(run, ReexecutionStrategy.FROM_FAILURE) : undefined)}\n      disabled={!canLaunchPipelineReexecution || !run || !canRunFromFailure(run)}\n    />\n  );\n\n  return (\n    <>\n      {materialize.launchpadElement}\n      <Popover\n        onOpened={() => fetchIfPossible()}\n        content={\n          <Menu>\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n              })}\n              icon=\"job\"\n              text=\"View job\"\n            />\n            <MenuLink\n              to={workspacePipelinePath({\n                repoName: repoAddress.name,\n                repoLocation: repoAddress.location,\n                pipelineName: job.name,\n                isJob: job.isJob,\n                path: '/runs',\n              })}\n              icon=\"checklist\"\n              text=\"View all recent runs\"\n            />\n            {canLaunchPipelineExecution ? (\n              executeItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineExecution} display=\"block\">\n                {executeItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteAllItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteAllItem}\n              </Tooltip>\n            )}\n            {canLaunchPipelineReexecution ? (\n              reExecuteFromFailureItem\n            ) : (\n              <Tooltip content={disabledReasons.canLaunchPipelineReexecution} display=\"block\">\n                {reExecuteFromFailureItem}\n              </Tooltip>\n            )}\n          </Menu>\n        }\n        position=\"bottom-left\"\n      >\n        <Button icon={<Icon name=\"expand_more\" />} />\n      </Popover>\n    </>\n  );\n};\n\nconst RUN_RE_EXECUTION_QUERY = gql`\n  query RunReExecutionQuery($runId: ID!) {\n    pipelineRunOrError(runId: $runId) {\n      ... on Run {\n        id\n        status\n        pipelineName\n        executionPlan {\n          artifactsPersisted\n          ...ExecutionPlanToGraphFragment\n        }\n      }\n    }\n  }\n  ${EXECUTION_PLAN_TO_GRAPH_FRAGMENT}\n`;\n","import {Box, MiddleTruncate} from '@dagster-io/ui-components';\nimport {useMemo} from 'react';\nimport {Link} from 'react-router-dom';\nimport styled from 'styled-components';\n\nimport {CaptionText, LoadingOrNone, useDelayedRowQuery} from './VirtualizedWorkspaceTable';\nimport {buildPipelineSelector} from './WorkspaceContext/util';\nimport {RepoAddress} from './types';\nimport {SingleJobQuery, SingleJobQueryVariables} from './types/VirtualizedJobRow.types';\nimport {workspacePathFromAddress} from './workspacePath';\nimport {gql, useLazyQuery} from '../apollo-client';\nimport {FIFTEEN_SECONDS, useQueryRefreshAtInterval} from '../app/QueryRefresh';\nimport {JobMenu} from '../instance/JobMenu';\nimport {LastRunSummary} from '../instance/LastRunSummary';\nimport {ScheduleOrSensorTag} from '../nav/ScheduleOrSensorTag';\nimport {RunStatusPezList} from '../runs/RunStatusPez';\nimport {RUN_TIME_FRAGMENT} from '../runs/RunUtils';\nimport {SCHEDULE_SWITCH_FRAGMENT} from '../schedules/ScheduleSwitch';\nimport {SENSOR_SWITCH_FRAGMENT} from '../sensors/SensorSwitch';\nimport {HeaderCell, HeaderRow, Row, RowCell} from '../ui/VirtualizedTable';\n\nconst TEMPLATE_COLUMNS = '1.5fr 1fr 180px 96px 80px';\n\ninterface JobRowProps {\n  name: string;\n  isJob: boolean;\n  repoAddress: RepoAddress;\n  height: number;\n  start: number;\n}\n\nexport const VirtualizedJobRow = (props: JobRowProps) => {\n  const {name, isJob, repoAddress, start, height} = props;\n\n  const [queryJob, queryResult] = useLazyQuery<SingleJobQuery, SingleJobQueryVariables>(\n    SINGLE_JOB_QUERY,\n    {\n      variables: {\n        selector: buildPipelineSelector(repoAddress, name),\n      },\n    },\n  );\n  useDelayedRowQuery(queryJob);\n  useQueryRefreshAtInterval(queryResult, FIFTEEN_SECONDS);\n\n  const {data} = queryResult;\n  const pipeline =\n    data?.pipelineOrError.__typename === 'Pipeline' ? data?.pipelineOrError : undefined;\n\n  const {schedules, sensors} = useMemo(() => {\n    if (pipeline) {\n      const {schedules, sensors} = pipeline;\n      return {schedules, sensors};\n    }\n    return {schedules: [], sensors: []};\n  }, [pipeline]);\n\n  const latestRuns = useMemo(() => {\n    if (pipeline) {\n      const {runs} = pipeline;\n      if (runs.length) {\n        return [...runs];\n      }\n    }\n    return [];\n  }, [pipeline]);\n\n  return (\n    <Row $height={height} $start={start}>\n      <RowGrid border=\"bottom\">\n        <RowCell>\n          <div style={{maxWidth: '100%', whiteSpace: 'nowrap', fontWeight: 500}}>\n            <Link to={workspacePathFromAddress(repoAddress, `/jobs/${name}`)}>\n              <MiddleTruncate text={name} />\n            </Link>\n          </div>\n          <CaptionText>{pipeline?.description || ''}</CaptionText>\n        </RowCell>\n        <RowCell>\n          {schedules.length || sensors.length ? (\n            <Box flex={{direction: 'column', alignItems: 'flex-start', gap: 8}}>\n              <ScheduleSensorTagContainer>\n                <ScheduleOrSensorTag\n                  schedules={schedules}\n                  sensors={sensors}\n                  repoAddress={repoAddress}\n                />\n              </ScheduleSensorTagContainer>\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns[0] ? (\n            <LastRunSummary\n              run={latestRuns[0]}\n              showButton={false}\n              showHover\n              showSummary={false}\n              name={name}\n            />\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          {latestRuns.length ? (\n            <Box padding={{top: 4}}>\n              <RunStatusPezList jobName={name} runs={[...latestRuns].reverse()} fade />\n            </Box>\n          ) : (\n            <LoadingOrNone queryResult={queryResult} />\n          )}\n        </RowCell>\n        <RowCell>\n          <Box flex={{justifyContent: 'flex-end'}} style={{marginTop: '-2px'}}>\n            <JobMenu\n              job={{name, isJob, runs: latestRuns}}\n              isAssetJob={pipeline ? pipeline.isAssetJob : 'loading'}\n              repoAddress={repoAddress}\n            />\n          </Box>\n        </RowCell>\n      </RowGrid>\n    </Row>\n  );\n};\n\nexport const VirtualizedJobHeader = () => {\n  return (\n    <HeaderRow templateColumns={TEMPLATE_COLUMNS} sticky>\n      <HeaderCell>Name</HeaderCell>\n      <HeaderCell>Schedules/sensors</HeaderCell>\n      <HeaderCell>Latest run</HeaderCell>\n      <HeaderCell>Run history</HeaderCell>\n      <HeaderCell></HeaderCell>\n    </HeaderRow>\n  );\n};\n\nconst RowGrid = styled(Box)`\n  display: grid;\n  grid-template-columns: ${TEMPLATE_COLUMNS};\n  height: 100%;\n`;\n\nconst ScheduleSensorTagContainer = styled.div`\n  width: 100%;\n\n  > .bp4-popover2-target {\n    width: 100%;\n  }\n`;\n\nconst SINGLE_JOB_QUERY = gql`\n  query SingleJobQuery($selector: PipelineSelector!) {\n    pipelineOrError(params: $selector) {\n      ... on Pipeline {\n        id\n        name\n        isJob\n        isAssetJob\n        description\n        runs(limit: 5) {\n          id\n          ...RunTimeFragment\n        }\n        schedules {\n          id\n          ...ScheduleSwitchFragment\n        }\n        sensors {\n          id\n          ...SensorSwitchFragment\n        }\n      }\n    }\n  }\n\n  ${RUN_TIME_FRAGMENT}\n  ${SCHEDULE_SWITCH_FRAGMENT}\n  ${SENSOR_SWITCH_FRAGMENT}\n`;\n"],"names":["ScheduleStateChangeDialog","openWithIntent","onClose","onComplete","schedules","props","count","length","state","dispatch","useInstigationStateReducer","useEffect","type","startSchedule","useMutation","START_SCHEDULE_MUTATION","stopSchedule","STOP_SCHEDULE_MUTATION","start","schedule","repoAddress","scheduleName","variables","scheduleSelector","repositoryLocationName","location","repositoryName","name","data","__typename","error","message","stop","scheduleState","id","stopRunningSchedule","mutate","canQuicklyClose","step","jsx_runtime","jsxs","Dialog","isOpen","title","canEscapeKeyClose","canOutsideClickClose","jsx","DialogBody","Group","direction","spacing","progressContent","div","concat","value","completion","completed","ProgressBar","intent","Math","max","animate","NavigationBlock","completionContent","errors","errorCount","Object","keys","successCount","alignItems","Icon","color","Colors","ul","map","li","strong","DialogFooter","buttons","Fragment","Button","onClick","disabled","ScheduleBulkActionMenu","onDone","setOpenWithIntent","useState","anyOff","anyOn","useMemo","instigationStateSummary","param","Popover","content","Menu","MenuItem","text","aria-disabled","icon","placement","rightIcon","SchedulerInfo","healthy","daemonHealth","boxProps","schedulerHealths","allDaemonStatuses","filter","daemon","daemonType","schedulerHealth","required","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","Box","Alert","description","a","href","makeScheduleKey","repoAddressAsHumanString","SensorStateChangeDialog","sensors","startSensor","START_SENSOR_MUTATION","stopSensor","STOP_SENSOR_MUTATION","sensor","sensorName","sensorSelector","sensorState","style","margin","SensorBulkActionMenu","useDelayedState","ready","setReady","timer","setTimeout","delayMsec","clearTimeout","SearchInputSpinner","tooltipContent","top","Tooltip","canShow","Spinner","purpose","JobMenu","job","isAssetJob","lastRun","runs","pipelineSelector","pipelineName","materialize","useMaterializationAction","onReexecute","useJobReexecution","permissions","canLaunchPipelineReexecution","canLaunchPipelineExecution","disabledReasons","usePermissionsForLocation","fetchHasExecutionPlan","queryResult","useLazyQuery","RUN_RE_EXECUTION_QUERY","fetchIfPossible","useCallback","runId","run","pipelineRunOrError","executeItem","loading","e","MenuLink","to","workspacePipelinePath","repoName","repoLocation","isJob","path","reExecuteAllItem","ReexecutionStrategy","ALL_STEPS","undefined","canRunAllSteps","reExecuteFromFailureItem","FROM_FAILURE","canRunFromFailure","launchpadElement","onOpened","display","position","gql","EXECUTION_PLAN_TO_GRAPH_FRAGMENT","TEMPLATE_COLUMNS","VirtualizedJobRow","height","queryJob","SINGLE_JOB_QUERY","selector","buildPipelineSelector","useDelayedRowQuery","useQueryRefreshAtInterval","FIFTEEN_SECONDS","pipeline","pipelineOrError","latestRuns","Row","$height","$start","RowGrid","border","RowCell","maxWidth","whiteSpace","fontWeight","Link","workspacePathFromAddress","MiddleTruncate","CaptionText","flex","gap","ScheduleSensorTagContainer","ScheduleOrSensorTag","LoadingOrNone","LastRunSummary","showButton","showHover","showSummary","padding","RunStatusPezList","jobName","reverse","fade","justifyContent","marginTop","VirtualizedJobHeader","HeaderRow","templateColumns","sticky","HeaderCell","styled","withConfig","RUN_TIME_FRAGMENT","SCHEDULE_SWITCH_FRAGMENT","SENSOR_SWITCH_FRAGMENT"],"sourceRoot":""}